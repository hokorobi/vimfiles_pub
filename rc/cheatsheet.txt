Movement
========

[z ]z       : 現在の折りたたみの先頭/末尾へ移動
zj zk       : 次/前の折りたたみの先頭/末尾へ移動。feat. submode 連続して j, k 入力で次、前へ移動
gt gT       : 前の／次のタブを表示
g; g,       : 変更した位置への移動。feat. submode 連続して ;, , 入力で次、前へ移動
:jumps      : ジャンプの履歴表示
C-i         : ジャンプの履歴を進む
o (v)       : 範囲開始指定をやり直し
<Space>;    : 直前の f, F, t, F を繰り返す。 feat. easymotion
<Space>,    : 直前の f, F, t, F を逆方向に繰り返す。 feat. easymotion
<A-f> (c)   : コマンドモードで f. feat.cmdlineplus
<A-S-f> (c) : コマンドモードで F. feat.cmdlineplus
<A-t> (c)   : コマンドモードで t. feat.cmdlineplus
<A-S-t> (c) : コマンドモードで T. feat.cmdlineplus
<A-d> (c)   : コマンドモードで df. feat.cmdlineplus
<A-S-d> (c) : コマンドモードで dF. feat.cmdlineplus
<C-k> (c)   : コマンドモードで C-k. feat.cmdlineplus
<A-;> (c)   : コマンドモードで ;. feat.cmdlineplus
<A-:> (c)   : コマンドモードで ,. feat.cmdlineplus
<A-,> (c)   : コマンドモードで ,. feat.cmdlineplus


Edit
====

F6 (ni)                   : 日付の入力
~                         : 大文字小文字入れ替え
:ISetting[!] [st][0-9]    : インデントの変更。s2 なら space で幅2 に変更。! 付きなら Retab も実行
:ExpandSerialNumber       : hoge [100-120] fuga などと入力して実行すると、hoge 100 fuga, hoge 101 fuga が各行に展開される。 feat. ExpandSerialNumber
                          : [0xa-0xf] 入力後に実行すると a-f を各行に展開 feat. ExpandSerialNumber
:SortLine                 : , 区切りの文字列をソートする（行全体）
<Space>a / <Space>x (v) : 選択範囲をインクリメント / デクリメント
:v/hoge/d                 : ある文字列を含む行のみを残して削除
:g/hoge/d                 : ある文字列を含む行を削除
gs                        : 要素の移動を可能にする swap mode (j, k: 対象選択、h, l: 対称移動) に入る feat. swap
g>                        : 要素を右に移動 feat. swap
g<                        : 要素を左に移動 feat. swap
g<C-a> (v)                : 選択範囲の数値を漸増的に N ずつ増やす。最初の行の数値から増加する。
cxiw                      : 入れ替えたい単語で実行することで入れ替えができる。 feat. vim-exchange
cxc                       : 入れ替え候補のキャンセル feat. vim-exchange
X (v)                     : 入れ替えたい単語で実行することで入れ替えができる。 feat. vim-exchange
cxx                       : X (v) で選択した行と、これを実行した行を入れ替え。 feat. vim-exchange
# (nv)                    : (n: カーソル下の単語|v: 選択文字列) をハイライトしてから置換
^M などの入力             : vim --clean filename で起動。Insert mode で Ctrl+v Ctrl+m
<C-r>" (i)                : 直前のレジスタから Paste
<C-r>0 (i)                : 一つ前のレジスタから Paste。cw<C-r>" だと変更前の単語が Paste されるので、こちらを使う。

複数ファイルに対する処理
------------------------

:args {argument}      : {argument} が対象のファイルリストとなる。{argument} は ./*.html とか。
:argsadd {argument}   : {argument} を追加。
:argdo %s/hoge/fuga/g : args に続けて実行。 {argument} に対して置換が実行される
:vim foo ##           : args に続けて実行。## が {argument} に置換されて実行される

. で連続して置換
-----------------

/ で検索
cgn で次の合致文字列を変更
. で次の合致文字列を同様に置換

複数の単語に同様の変更を加える
-------------------------------

1. 最初の単語で cw<p><C-r><C-p>"</p><ESC> として <p></p> で囲む（<C-r><C-p>" でなく <C-r>" では駄目）
2. 次の単語で .


Easy Align
==========

<Space>    : Around 1st whitespaces
3<Space>   : Around 2nd whitespaces
-<Space>   : Around the last whitespaces
-1<Space>  : Around the 2nd to last whitespaces
:          : Around 1st colon (key: value)
<Right>:   : Around 1st colon (key : value)
=          : Around 1st operators with =
3=         : Around 3rd operators with =
*=         : Around all operators with =
**=        : Left-right alternating around =
<Enter>=   : Right alignment around 1st =
<Enter>**= : Right-left alternating around =
*<C-x>[:=] : すべての : と = を対象とする (<C-x> で正規表現使用)

Surround (feat. sandwich)
=========================

sa{TextObject}" : TextObject を " で括る
sa" (v)         : 選択範囲を " で括る
sai"f           : "" 括りを、このあと入力する function と () で括る
sai"i           : "" 括りを、このあと入力する head と tail で括る
dss             : 一番内側の括りを外す
2sdd            : 二番目に内側の括りを外す
sr"(            : "" の括りを () に置き換える
sc"(            : "" の括りを () に置き換える
sr( (v)         : 選択した括りを () に置き換える
srr(            : 一番内側の括りを () に置き換える
2srr(           : 二番目に内側の括りを () に置き換える
rss(            : 一番内側の括りを () に置き換える
css(            : 一番内側の括りを () に置き換える
2css(           : 二番目に内側の括りを () に置き換える
sdt             : HTML のタグを削除


fold
====

zc zo : 現在の折りたたみを閉じる/開く
zC zO : 現在の折りたたみをすべて閉じる/すべて開く
zM zR : すべての折りたたみを閉じる/開く
za    : 現在の折りたたみを開閉する
zv    : カーソル位置の折りたたみをすべて開く
zf    : 折りたたみを作成する


file
====

:DeleteMe   : カレントファイル削除
:PrevimOpen : markdown のプレビュー feat. previm


grep
====

<Space>*                      : カーソルの単語をファイル内から
:vim {pattern} %              : カレントバッファを
:vim {pattern} **             : カレントディレクトリの全てのファイル, ディレクトリを対象に
:vim {pattern} *              : カレントディレクトリの全てのファイルを対象に
:vim {pattern} `git ls-files` : git の管理対象ファイルに対して
:grep /G \.vim$ {pattern} .   : カレントディレクトリ配下の *.vim から {pattern} を検索。pt 用


Bookmark
========

mi: 注釈の編集
mx: ブックマークをすべて削除
ma: ブックマークをすべて表示
mn: 次のブックマークへ移動
mp: 前のブックマークへ移動


help
====

:help CTRL-]             : (ノーマルモードの) コントロール文字コマンド CTRL-] のヘルプを表示
:help i_CTRL-            : 挿入モードのコントロール文字コマンド CTRL-] のヘルプを表示
:help 'number'           : オプション number のヘルプを表示
:help :help              : コマンドラインコマンド help のヘルプを表示
:helpgrep hoge           : hoge をヘルプから検索
:help local-additions    : runtimepath に追加されたプラグインの doc を一覧表示
:help highlight-groups   : ハイライトのグループ表示
:help cmdline-special    : Exコマンド用の特別な文字 の説明
:help filename-modifiers : :p や :h などのファイル名修飾子
<C-CR>                   : カーソル位置のハイライト名を表示


QuickFix
========

:colder : 古い QuickFix へ移動
:cnewer : 新しい QuickFix へ移動


Macro
=====

A-m        : マクロ m へ記録。A-m で記録を停止
<Space>Q a : マクロ a へ記録。<Space>Q で記録を停止
@a         : マクロ a を実行


CtrlP
=====

C-z : バッファ選択
C-w : バッファを閉じる


howm
========

<Space>,u : 最近編集したファイル一覧
<Space>,, : howm ファイルから grep

golang
=======

]] [[       : 次、前の関数へ feat. vim-go
:GoDecls    : ファイル内の関数、変数の定義を CtrlP で表示 feat. vim-go
:GoDeclsDir : ディレクトリ内の関数、変数の定義を CtrlP で表示 feat. vim-go
C-t         : GoDef のジャンプの前の位置に戻る feat. vim-go
:GoFreeVars : 選択範囲のコードで使用される変数がわかる feat. vim-go
<Space>ge   : 選択したコードを続けて入力する名前で関数化 feat. godoctor.vim

Gina.vim
========
<Space>gs  : Gina status
cc (status) : Gina commit
s (blame)   : Gina show

riv.vim
=======
<riv> = <C-u>
<riv>cdd      : 今日の日付を挿入
<riv>cf       : footnote 追加
<riv>cs       : カーソル位置の単語を強調
< >           : インデント。リストも同じく
<riv>s1       : レベル1の見出し追加。1 は 6 まで変えられる
<riv>hs       : 現在のカレントを参照
<riv>cb       : コードブロック（::）追加
<riv>cm       : explicit mark (..) 追加
<riv>cr       : -------- 追加
<riv>ck       : リンク追加
<riv>cl       : ```` 追加
<riv>l1       : 現在行をリストアイテム化。1 - 6 でレベル指定
<riv>lx       : 現在行を非リストアイテム化
C-Enter (i)   : リストアイテムを追加
S-Enter (i)   : 子のリストアイテムを追加
C-S-Enter (i) : 親のリストアイテムを追加
<riv>ee       : リストのときに TODO へ。TODO のときは [] -> [o] -> [x] に変更。
<riv>ep       : TODO の優先度を追加 or 下げる
Enter         : リンクのターゲットへ移動
<riv>tc       : テーブル追加
C-Enter (i)   : テーブルの行を追加
| (i)         : テーブルの列を追加

Others
======

<C-CR>                  : カーソル位置のハイライトグループ名表示
gv                      : 前回の選択範囲を再度選択
:verbose inoremap <C-l> : <C-l> を最後に inoremap したファイルを表示
:cq                     : vim を不正終了。git コミットのキャンセルなど
:Jq .obj                : JSON の obj を抽出。引数なしなら整形のみ
:Jj obj                 : JSON の obj を抽出。引数なしなら整形のみ（Jq より高速。まだ若いのでバグがあるかも）
/[\u3041-\u3096]        : ひらがな検索 https://so-zou.jp/software/tech/programming/tech/regular-expression/meta-character/variable-width-encoding.htm


関数エラーからの Vim script の追い方
------------------------------------

以下のようなエラーが表示された場合に関数を指定してコードを確認する。

function gista#autocmd#call[14]..<SNR>159_on_BufWriteCmd[13]..gista#command#patch#call[14]..gista#resource#remote#patch[17]..gista#resource#remote#get[19]..159[9]..157[34]..<SNR>137_request[33]..166 の処理中にエラーが検出されました:
行   94:
E887: このコマンドは無効です,ごめんなさい. Python の site モジュールをロードできませんでした.

:verbose function gista#autocmd#call
:verbose function {157}

