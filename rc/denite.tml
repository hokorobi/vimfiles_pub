#       denite {{{1
[[plugins]]
repo = 'Shougo/denite.nvim'
on_cmd = 'Denite'
on_ft = 'howm_memo'
depends = ['neomru.vim']
hook_add = '''
  " vim-rooter を使うので DeniteBuffer はやめた
  nnoremap <Leader>ff :Denite -cursor-wrap file/rec<CR>
  nnoremap <Leader>fr :Denite -cursor-wrap file/rec:~/_vim/dein/repos<CR>
  nnoremap <Leader>fg :Denite -cursor-wrap file/rec:~/src<CR>
  nnoremap <Leader>fv :Denite -cursor-wrap file/rec:~/vimfiles<CR>
  nnoremap <Leader>/ :Denite -cursor-wrap line::noempty<CR>

  " howm の grep
  if exists('g:howm_dir') && isdirectory(g:howm_dir)
    nnoremap <Leader>,, :call vimrc#DeniteGrepHowm()<CR>
  endif

  call extend(g:vimrc_altercmd_dic, {'den[ite]': 'Denite'})
'''
hook_source = '''
  call denite#custom#map('insert', "\<C-j>", '<denite:move_to_next_line>', 'noremap')
  call denite#custom#map('insert', "\<C-k>", '<denite:move_to_previous_line>', 'noremap')
  call denite#custom#map('insert', ';', '<denite:enter_mode:normal>', 'noremap')
  call denite#custom#map('insert', ',', '<denite:input_command_line>', 'noremap')

  if Vimrc_executable('rg')
    call denite#custom#var('grep', 'command', ['rg'])
    call denite#custom#var('grep', 'recursive_opts', [])
  elseif Vimrc_executable('pt')
    call denite#custom#var('grep', 'command', ['pt'])
    call denite#custom#var('grep', 'recursive_opts', [])
    call denite#custom#var('grep', 'separator', [])
    call denite#custom#var('grep', 'default_opts', ['--nogroup', '--nocolor', '--column', '--hidden', '--home-ptignore', '-S'])
  endif

  " fuzzy だと期待したファイル以上のファイルが出てくる
  call denite#custom#source('file/rec', 'matchers', ['matcher_substring'])

  if Vimrc_executable('rg')
    call denite#custom#var('file/rec', 'command', ['rg', '--files', '--color=never', '--glob', '!.git'])
  elseif Vimrc_executable('pt')
    " 体感的に files と大差ないが files だと音楽の再生が途切れる。I/Oを使い切れるということかも。
    call denite#custom#var('file/rec', 'command', ['pt', '--follow', '--nocolor', '--nogroup', '--hidden', '--home-ptignore', '-g:', ''])
  endif
'''

[[plugins]]
repo = 'Shougo/neomru.vim'
# howm だけ MRU に保存できれば良いので howm_memo が開かれるまでは読み込まれなくてよし
lazy = 1
hook_add = '''
  " howm にはプレビューがほしいので ctrlp でなく denite+neomru を使う
  nnoremap <Leader>,u :<C-u>Denite file_mru -auto-preview -input=howm<CR>
'''

# }}}1  CtrlP {{{1
[[plugins]]
repo = 'ctrlpvim/ctrlp.vim'
hook_add = '''
  let g:ctrlp_map = '<Nop>'

  " TODO: バッファをフルパスで検索したい。~/ が展開されていない。

  if Vimrc_executable('rg')
    let g:ctrlp_user_command = 'rg %s --files --color=never --glob ""'
  elseif Vimrc_executable('files')
    " https://github.com/mattn/files
    let g:ctrlp_user_command = 'files -A %s'
  endif

  " 候補の残りにあわせてリサイズはしない
  let g:ctrlp_match_window = 'bottom,order:ttb,min:20,max:20'

  " Guess vcs root dir
  let g:ctrlp_working_path_mode = 'ra'

  " Open new file in current window
  let g:ctrlp_open_new_file = 'r'

  " cache files directory
  let g:ctrlp_cache_dir = $HOME . '/_vim/.ctrlp'

  " scan for dotfiles, dotdirectories
  let g:ctrlp_show_hidden = 1

  " enable multi-byte input
  let g:ctrlp_key_loop = 1

  let g:ctrlp_switch_buffer = 0

  let g:ctrlp_regexp = 0

  let g:ctrlp_mruf_exclude = '^C:\\Users\\hokorobi\\AppData\\Local\\Temp\\.*'

  " ctrlp-sessions setting
  let g:ctrlp_open_single_match = ['session:']

  " mapping
  let g:ctrlp_prompt_mappings = {
        \ 'AcceptSelection("e")': ['<cr>', '<2-LeftMouse>', '<m-m>'],
        \ 'PrtSelectMove("j")'  : ['<c-j>', '<down>', '<m-j>'],
        \ 'PrtSelectMove("k")'  : ['<c-k>', '<up>', '<m-k>'],
        \ 'PrtBS()'             : ['<bs>', '<c-]>', '<c-h>'],
        \ 'PrtCurLeft()'        : ['<c-b>', '<left>', '<c-^>'],
        \ 'ToggleType(-1)'      : ['<c-down>'],
        \ 'PrtCurRight()'       : ['<c-f>', '<c-l>', '<right>'],
        \ 'ToggleType(1)'       : ['<c-up>'],
        \ 'PrtInsert("c")'      : ['<c-v>', '<MiddleMouse>', '<insert>'],
        \ 'PrtDelete()'         : ['<c-d>', '<del>'],
        \ 'PrtDeleteWord()'     : ['<c-q>'],
        \ 'ToggleByFname()'     : ['<F8>'],
        \ 'AcceptSelection("v")': ['<RightMouse>'],
        \ 'PrtDeleteEnt()':       ['<F7>', '<c-w>'],
        \ }

  nnoremap <Leader>b :<C-u>CtrlPBuffer<CR>
  nnoremap <Leader>u :<C-u>CtrlPMRUFiles<CR>
'''

[[plugins]]
repo = 'hokorobi/ctrlp-sessions'
on_cmd = ['CtrlPSession', 'MkS']
hook_add = '''
  nnoremap <Leader>fs :<C-u>CtrlPSessions<CR>
  call extend(g:vimrc_altercmd_dic, {'ss': 'MkS'})

  let g:ctrlp_session_dir = expand('~/vimfiles/sessions')
'''

[[plugins]]
repo = 'mattn/ctrlp-launcher'
on_cmd = 'CtrlPLauncher'
hook_add = '''
  let g:ctrlp_launcher_file = expand('~/vimfiles/.ctrlp-launcher')
  nnoremap <Leader>fm :<C-u>CtrlPLauncher<CR>
'''

[[plugins]]
repo = 'zeero/vim-ctrlp-help'
on_cmd = 'CtrlPHelp'
hook_add = '''
  nnoremap <Leader>fh :<C-u>CtrlPHelp<CR>

  call extend(g:vimrc_altercmd_dic, {'hh': 'CtrlPHelp'})
'''

[[plugins]]
repo = 'ivalkeen/vim-ctrlp-tjump'
on_cmd = ['CtrlPtjump', 'CtrlPtjumpVisual']
hook_add = '''
  let g:ctrlp_tjump_only_silent = 1
  nnoremap <c-]> :CtrlPtjump<cr>
  vnoremap <c-]> :CtrlPtjumpVisual<cr>
'''

[[plugins]]
repo = 'ompugao/ctrlp-locate'
on_cmd = 'CtrlPLocate'
hook_add = '''
  nnoremap <Leader>fe :<C-u>CtrlPLocate<CR>
  let g:ctrlp_locate_command_definition = 'es -n 100 {query}'
'''

[[plugins]]
repo = 'tacahiroy/ctrlp-funky'
on_cmd = 'CtrlPFunky'
hook_add = '''
  nnoremap <Leader>fu :<C-u>CtrlPFunky<CR>
'''

[[plugins]]
repo = 'christoomey/ctrlp-generic'
depends = 'vim-system_job'
hook_add = '''
  function! PasteCallback(selected_value) abort
    call setreg('z', a:selected_value)
    normal! "zp
  endfunction
  command! -nargs=1 CtrlPCmdPaste call CtrlPGeneric(system_job#systemlist(<q-args>), 'PasteCallback')
'''
# }}}1

