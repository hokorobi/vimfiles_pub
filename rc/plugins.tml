#       dein {{{1
[[plugins]]
repo = 'Shougo/dein.vim'

# }}}1  Completion {{{1
[[plugins]]
repo = 'Shougo/neocomplete.vim'
on_ft = ['autohotkey','autoit','cfg','git','go','groovy','java','javascript','python','snippet','toml','vb','vim','xsl']
depends = ['neco-syntax', 'neosnippet.vim']
hook_source = '''
  let g:neocomplete#enable_at_startup = 0
  let g:neocomplete#enable_smart_case = 1

  let g:neocomplete#data_directory = expand('~/_vim/.neocomplete')

  " 使用する補完の種類を減らす
  " 現在のSourceの取得は `:echo keys(neocomplete#variables#get_sources())`
  " デフォルト: ['file', 'tag', 'neosnippet', 'dictionary', 'omni', 'member', 'syntax', 'include', 'buffer', 'file/include']
  let g:neocomplete#sources = get(g:, 'neocomplete#sources', {})
  let g:neocomplete#sources._ = ['file', 'neosnippet', 'dictionary', 'member', 'syntax', 'buffer']

  " let g:neocomplete#fallback_mappings = ["\<C-x>\<C-o>"]
  " <C-h>, <BS>: close popup and delete backword char.
  " inoremap <expr> <C-h> neocomplete#smart_close_popup().'<C-h>'
  " inoremap <expr> <BS> neocomplete#smart_close_popup().'<C-h>'

  autocmd vimrc FileType autohotkey,autoit,cfg,git,go,groovy,java,javascript,python,snippet,toml,vb,vim,xsl NeoCompleteEnable
'''

[[plugins]]
repo = 'Shougo/neco-syntax'

# }}}1  Quickrun {{{1
[[plugins]]
repo = 'thinca/vim-quickrun'
on_cmd = 'QuickRun'
on_map = '<Plug>'
depends = 'shabadou.vim'
hook_add = '''
  let g:quickrun_config = get(g:, 'quickrun_config', {})
  let g:quickrun_config._ = {
        \   'runner': 'vimproc',
        \   'runner/vimproc/updatetime': 1000,
        \   'outputter': 'buffer',
        \   'outputter/buffer/close_on_empty': 1,
        \   'hook/neco/enable': 1,
        \   'hook/neco/wait': 1,
        \ }

  call extend(g:vimrc_altercmd_dic, {'quic[krun]': 'Quickrun'})
'''

[[plugins]]
repo = 'osyo-manga/vim-watchdogs'
on_cmd = 'WatchdogsRun'
depends = ['vim-quickrun', 'shabadou.vim', 'vim-hier', 'quickfixstatus']
hook_add = '''
  nnoremap <Leader>w :<C-u>WatchdogsRun<CR>
'''
hook_source = '''
  let g:quickrun_config['watchdogs_checker/_'] = {
        \   'hook/echo/enable': 1,
        \   'hook/echo/output_success': '> No Errors Found.',
        \}
  if executable('rst-lint')
    let g:quickrun_config['rst/watchdogs_checker'] = {
          \   'type': 'watchdogs_checker/rst-lint'
          \ }
    let g:quickrun_config['watchdogs_checker/rst-lint'] = {
          \   'command': 'rst-lint',
          \   'exec': '%c %o %s:p ' ,
          \   'cmdopt': '--encoding '.&fileencoding,
          \   'quickfix/errorformat': 'INFO %f:%l %m',
          \ }
  endif

  " :Build
  let g:quickrun_config['watchdogs_checker/go_build'] = {
        \   'command':     'go',
        \   'exec':        '%c build %o',
        \   "errorformat": '%f:%l: %m,%-G%.%#',
        \ }
  autocmd vimrc FileType go command! -buffer Build WatchdogsRun watchdogs_checker/go_build
'''

[[plugins]]
repo = 'osyo-manga/shabadou.vim'

[[plugins]]
repo = 'pocke/vim-hier'
lazy = 1

[[plugins]]
repo = 'pekepeke/quickfixstatus'
lazy = 1

# }}}1  Text Object {{{1
[[plugins]]
repo = 'kana/vim-textobj-user'

[[plugins]]
repo = 'mattn/vim-textobj-url'
on_source = 'vim-expand-region'
depends = 'vim-textobj-user'

[[plugins]]
repo = 'hokorobi/vim-expand-region'
on_map = '<Plug>(expand_region'
frozen = 1
hook_add = '''
  " ad: delimited
  " ib: sandwich
  " ii, ai, iI, aI: indent
  let g:expand_region_text_objects = {
        \ 'iw': 0,
        \ 'iW': 0,
        \ 'iu': 0,
        \ 'ad': 0,
        \ 'ib': 1,
        \ 'ab': 1,
        \ 'iI': 0,
        \ 'aI': 0,
        \ 'ii': 0,
        \ 'ia': 0,
        \ }

  " expand-regionモードの設定。,eでモードに入り、eで拡張、s, Eで縮小できる
  call submode#enter_with('expand-region', 'nv', 'r', ',e', '<Plug>(expand_region_expand)')
  call submode#map('expand-region', 'nv', 'r', 'e', '<Plug>(expand_region_expand)')
  call submode#map('expand-region', 'nv', 'r', 'E', '<Plug>(expand_region_shrink)')
'''

[[plugins]]
repo = 'machakann/vim-sandwich'
on_map = '<Plug>(operator-sandwich-'
on_source = 'vim-expand-region'
hook_add = '''
  NXmap s <Nop>

  nmap sc  <Plug>(operator-sandwich-replace)<Plug>(operator-sandwich-release-count)<Plug>(textobj-sandwich-query-a)
  nmap scc <Plug>(operator-sandwich-replace)<Plug>(operator-sandwich-release-count)<Plug>(textobj-sandwich-auto-a)
  nmap css <Plug>(operator-sandwich-replace)<Plug>(operator-sandwich-release-count)<Plug>(textobj-sandwich-auto-a)
  XOmap sc  <Plug>(operator-sandwich-replace)

  nmap sr  <Plug>(operator-sandwich-replace)<Plug>(operator-sandwich-release-count)<Plug>(textobj-sandwich-query-a)
  nmap srr <Plug>(operator-sandwich-replace)<Plug>(operator-sandwich-release-count)<Plug>(textobj-sandwich-auto-a)
  nmap rss <Plug>(operator-sandwich-replace)<Plug>(operator-sandwich-release-count)<Plug>(textobj-sandwich-auto-a)
  XOmap sr <Plug>(operator-sandwich-replace)

  nmap sd  <Plug>(operator-sandwich-delete)<Plug>(operator-sandwich-release-count)<Plug>(textobj-sandwich-query-a)
  nmap sdd <Plug>(operator-sandwich-delete)<Plug>(operator-sandwich-release-count)<Plug>(textobj-sandwich-auto-a)
  nmap dss <Plug>(operator-sandwich-delete)<Plug>(operator-sandwich-release-count)<Plug>(textobj-sandwich-auto-a)
  XOmap sd <Plug>(operator-sandwich-delete)

  nmap saa <Plug>(operator-sandwich-add)<Plug>(operator-sandwich-release-count)<Plug>(textobj-sandwich-auto-a)
  NXOmap sa <Plug>(operator-sandwich-add)
'''
hook_source = '''
  let g:sandwich_no_default_key_mappings = 1
  let g:textobj#sandwich#stimeoutlen = 100
  let g:sandwich#recipes = deepcopy(g:sandwich#default_recipes)

  let g:sandwich#recipes += [{'buns': ['「', '」']}]
  let g:sandwich#recipes += [{'buns': ['【', '】']}]
  let g:sandwich#recipes += [{'buns': ['（', '）']}]
  let g:sandwich#recipes += [{'buns': ['『', '』']}]
'''

[[plugins]]
repo = 'machakann/vim-textobj-delimited'
on_source = 'vim-expand-region'
hook_source = '''
  let g:textobj_delimited_patterns = [[', *', '\m\%(, *\)\?\%([^,[\]{}]\+, *\)\+\%([^,[\]{}]\+\)\?']]
'''

[[plugins]]
repo = 'tommcdo/vim-exchange'
on_map = [['n', 'cx'], ['x', 'X']]

[[plugins]]
repo = 'kana/vim-textobj-indent'

# }}}1  Language, Format, Filetype {{{1
[[plugins]]
repo = 'tyru/caw.vim'
on_map = '<Plug>(caw:prefix)'
hook_add = '''
  NVmap gc <Plug>(caw:prefix)
  " 現在行をコピーしてコメントアウト
  nmap gcy yypgcIk
  " 選択範囲をコピーしてコメントアウト
  vmap gcy ygvgcIp
'''

# インデントのスペース数を変換。タブをスペースへ変換
[[plugins]]
repo = 'tyru/codingstyle.vim'
on_cmd = ['CSChangeSpaceIndent', 'CSUnretab']

# diff
[[plugins]]
repo = 'AndrewRadev/linediff.vim'
on_cmd = 'Linediff'
hook_add = '''
  call extend(g:vimrc_altercmd_dic, {'diffl[ine]': 'Linediff'})
'''

[[plugins]]
repo = 'lambdalisue/vim-diffa'

# Python
[[plugins]]
repo = 'hdima/python-syntax'
hook_add = 'let g:python_hightlight_all = 1'

[[plugins]]
repo = 'davidhalter/jedi-vim'
on_ft = 'python'
depends = ['neocomplete.vim']
hook_source = '''
  let g:jedi#auto_initialization = 1
  let g:jedi#auto_vim_configuration = 0
  let g:jedi#popup_select_first = 0
  let g:jedi#popup_on_dot = 0

  " neocomplete
  autocmd vimrc FileType python setlocal omnifunc=jedi#completions
  let g:neocomplete#sources = get(g:, 'neocomplete#sources', {})
  let g:neocomplete#sources.python = ['file', 'neosnippet', 'dictionary', 'omni', 'member', 'syntax', 'buffer']
  let g:jedi#completions_enabled = 0
  let g:jedi#auto_vim_configuration = 0
  let g:neocomplete#force_omni_input_patterns = get(g:, 'neocomplete#force_omni_input_patterns', {})
  let g:neocomplete#force_omni_input_patterns.python = '\h\w*\|[^. \t]\.\w*'
'''

[[plugins]]
repo = 'hynek/vim-python-pep8-indent'

# Golang
[[plugins]]
repo = 'fatih/vim-go'
on_ft = 'go'
hook_source = '''
  " GoFmt でも goimports を使う
  if Vimrc_executable('goimports')
    let g:go_fmt_command = 'goimports'
  endif
  let g:go_gocode_socket_type = 'tcp'

  call extend(g:vimrc_altercmd_dic, {
        \ 'godo[c]': 'GoDoc',
        \ 'goru[n]': 'GoRun'})

  " neocomplete
  let g:neocomplete#sources = get(g:, 'neocomplete#sources', {})
  let g:neocomplete#sources.go = ['file', 'neosnippet', 'dictionary', 'omni', 'member', 'syntax', 'buffer']
'''

[[plugins]]
repo = 'mattn/goplayground-vim'
depends = 'webapi-vim'

# Markdown
[[plugins]]
repo = 'kannokanno/previm'
on_cmd = 'PrevimOpen'
depends = 'open-browser.vim'

[[plugins]]
repo = 'plasticboy/vim-markdown'

# Vim
[[plugins]]
repo = 'syngan/vim-vimlint'
on_func = 'vimlint#vimlint'
depends = 'vim-vimlparser'
hook_add = '''
  command! Vimlint call vimlint#vimlint(expand('%:p'))
'''

[[plugins]]
repo = 'vim-jp/syntax-vim-ex'

# JavaScript
[[plugins]]
repo = 'pangloss/vim-javascript'

# SQL
[[plugins]]
repo = 'vim-scripts/SQLUtilities'
on_cmd = 'SQLUFormatter'
depends = 'Align'

# Others
[[plugins]]
repo = 'PProvost/vim-ps1'
hook_add = 'autocmd vimrc BufNewFile,BufRead *.ps1 setfiletype ps1'

[[plugins]]
repo = 'hokorobi/plantuml-syntax'
frozen = 1

[[plugins]]
repo = 'cespare/vim-toml'
hook_add = 'autocmd vimrc BufNewFile,BufRead *.tml,*.toml setfiletype toml'

[[plugins]]
repo = 'osyo-manga/vim-precious'
depends = 'context_filetype.vim'
on_ft = ['markdown', 'toml']

[[plugins]]
repo = 'Shougo/context_filetype.vim'

# }}}1  tags {{{1
[[plugins]]
repo = 'hokorobi/vim-tagsgen'
on_cmd = ['Tagsgen', 'TagsgenSetDir']
hook_add = '''
  nnoremap <silent> <Leader>cd :TagsgenSetDir<CR>
  let g:tagsgen_data_dir = expand('~/_vim/.tagsgen')
'''

# }}}1  Color {{{1
[[plugins]]
repo = 'w0ng/vim-hybrid'

# }}}1  Look {{{1
[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
  let g:unite_force_overwrite_statusline = 0
  let g:vimfiler_force_overwrite_statusline = 0
  let g:vimshell_force_overwrite_statusline = 0

  let g:lightline = {
        \ 'colorscheme': 'default',
        \ 'active': {
        \   'left': [['mode', 'paste'], ['readonly', 'filename', 'modified', 'pwd']],
        \   'right': [['lineinfo'], ['percent'], ['fileformat', 'myfenc', 'filetype']]},
        \ 'component_function': {
        \   'pwd': 'getcwd',
        \   'myfenc': 'MyLightLineFenc'}}

  function! MyLightLineFenc() abort
    if winwidth(0) < 70
      return ''
    endif

    let fenc = strlen(&fileencoding) ? &fileencoding : &encoding
    return fenc !=# 'utf-8' ? fenc : &bomb == 0 ? fenc . 'n' : fenc
  endfunction
'''

[[plugins]]
repo = 'osyo-manga/vim-anzu'
on_map = '<Plug>'
hook_add = '''
  " https://raw.githubusercontent.com/DeaR/dotfiles/master/.vimrc
  XOmap <expr> n v:searchforward ? 'n' : 'N'
  XOmap <expr> N v:searchforward ? 'N' : 'n'
  nmap <expr> n v:searchforward ? '<Plug>(anzu-n-with-echo)' : '<Plug>(anzu-N-with-echo)'
  nmap <expr> N v:searchforward ? '<Plug>(anzu-N-with-echo)' : '<Plug>(anzu-n-with-echo)'
'''

[[plugins]]
# 遅延読み込みだと前回起動時のマークが復元されない様子
repo = 'MattesGroeger/vim-bookmarks'
hook_add = '''
  let g:bookmark_auto_save_file = expand('~/_vim/.vim-bookmarks')
  " 1 にすると bookmark_auto_save_file が無効になる。
  " let g:bookmark_manage_per_buffer = 0
  let g:bookmark_sign = '>>'
  let g:bookmark_annotation_sign = '##'
  " ctrlp ではファイル名を表示できないので従来の BookmarkShowAll を使用する
  let g:bookmark_disable_ctrlp = 1
  " ブックマークを開いたら候補のウィンドウは閉じる
  let g:bookmark_auto_close = 1
'''

[[plugins]]
repo = 'itchyny/vim-cursorword'

[[plugins]]
repo = 'itchyny/vim-parenmatch'

# }}}1  Input & Edit {{{1
[[plugins]]
repo = 'cohama/lexima.vim'
on_if = 1
hook_source = 'source ~/vimfiles/rc/lexima.vim'

[[plugins]]
repo = 'machakann/vim-highlightedyank'
on_map = '<Plug>'
hook_source = '''
  let g:highlightedyank_highlight_duration = 300
  highlight link HighlightedyankRegion Visual
'''
hook_add = '''
  map y <Plug>(highlightedyank)
  map Y <Plug>(highlightedyank)$
'''

[[plugins]]
repo = 'kana/vim-operator-replace'
on_map = '<Plug>(operator-replace'
depends = 'vim-operator-user'
hook_add = 'vmap p <Plug>(operator-replace)'

[[plugins]]
repo = 'Shougo/neosnippet.vim'
depends = 'neosnippet-snippets'
on_event = 'InsertEnter'
hook_source = '''
  " <TAB>: completion.
  " inoremap <expr><TAB> pumvisible() ? '<C-n>' : '<TAB>'
  inoremap <expr> <S-TAB> pumvisible() ? '<C-p>' : '<S-TAB>'

  " Plugin key-mappings.
  imap <C-k> <Plug>(neosnippet_expand_or_jump)
  smap <C-k> <Plug>(neosnippet_expand_or_jump)

  " SuperTab like snippets behavior.
  imap <expr> <TAB> neosnippet#jumpable() ? '<Plug>(neosnippet_expand_or_jump)' : pumvisible() ? '<C-n>' : '<TAB>'
  smap <expr> <TAB> neosnippet#jumpable() ? '<Plug>(neosnippet_expand_or_jump)' : '<TAB>'

  let g:neosnippet#data_directory = expand('~/_vim/.neosnippet')

  " Enable snipMate compatibility feature.
  let g:neosnippet#enable_snipmate_compatibility = 1

  " Tell Neosnippet about the other snippets
  let g:neosnippet#snippets_directory = [
        \   '~/vimfiles/snippets',
        \   '~/_vim/bundle/neosnippet-snippets/neosnippets',
        \   '~/_vim/bundle/vim-snippets/snippets',
        \ ]
'''

# on_source = 'neocomplete.vim' だとエラーが出た
[[plugins]]
repo = 'Shougo/neosnippet-snippets'

# lazy =1 や rtp = '' にするとエラーが出た
[[plugins]]
repo = 'honza/vim-snippets'
rtp = ''

[[plugins]]
repo = 'AndrewRadev/switch.vim'
on_func = 'switch#'
# 設定に ''' が入っているので """ """ でくくらないと駄目。あと vimrc から移す際に \\ を増やした。
hook_add = """
  " デフォルトのキーマッピングを無効化
  let g:switch_mapping = ''

  let g:switch_custom_definitions =
        \ [
        \   ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'],
        \   ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'],
        \   ['月', '火', '水', '木', '金', '土', '日'],
        \   ['yes', 'no'],
        \   ['left', 'right'],
        \   ['=', ' = '],
        \   ['+', ' + '],
        \   ['-', ' - '],
        \   ['*', ' * '],
        \   ['/', ' / '],
        \   ['pick', 'fold', 'mess', 'edit', 'drop'],
        \ ]
  " 3つ目: '<C-c>' とかを "\<C-c>" にはしないので無視。'''\1''' は '' と解釈
  " されるけど、2つ目で捕捉されるので発生しない……はず。
  autocmd vimrc FileType vim let b:switch_custom_definitions = [
        \   {'"\(\k*\)"': '''\1''', '''\(\k*\)''': '"\1"',},
        \   ['"\\\\\(\[^"]\+\)"', '''\1'''],
        \ ]
"""

[[plugins]]
repo = 'tpope/vim-speeddating'
on_func = 'speeddating#'

[[plugins]]
repo = 'junegunn/vim-easy-align'
on_cmd = 'EasyAlign'
on_map = '<Plug>(EasyAlign'
depends = ['vim-repeat', 'visualrepeat']
hook_add = 'vmap <Enter> <Plug>(EasyAlign)'

[[plugins]]
repo = 'simnalamburt/vim-mundo'
on_cmd = 'MundoToggle'
hook_add = 'nnoremap U :<C-u>MundoToggle<CR>'

[[plugins]]
repo = 'osyo-manga/vim-jplus'
on_map = '<Plug>'
hook_add = '''
  NVmap J <Plug>(jplus-input)<CR>
  NVmap <Leader>J <Plug>(jplus-input)
'''

[[plugins]]
repo = 'LeafCage/yankround.vim'
on_map = '<Plug>'
on_cmd = 'CtrlPYankRound'
hook_add = '''
  xmap p <Plug>(yankround-p)
  xmap gp <Plug>(yankround-gp)
  nnoremap <Leader>fp :<C-u>CtrlPYankRound<CR>
  nmap <expr> P yankround#is_active() ? '<Plug>(myyr)' : '<Plug>(yankround-P)'
  nmap <expr> p yankround#is_active() ? '<Plug>(myyr)' : '<Plug>(yankround-p)'

  call submode#enter_with('yr', 'n', 'r', '<Plug>(myyr)', '<Plug>(yankround-prev)')
  call submode#map('yr', 'n', 'r', 'p', '<Plug>(yankround-prev)')
  call submode#map('yr', 'n', 'r', 'n', '<Plug>(yankround-next)')

  let g:yankround_dir = expand('~/_vim/.yankround')
  let g:yankround_use_region_hl = 1
'''

# g<C-a> などは同行での連番はできないようなので、まだ有用
[[plugins]]
repo = 'deris/vim-rengbang'
on_cmd = ['RengBang', 'RengBangUsePrev', 'RengBangConfirm']
hook_source = 'let g:rengbang_default_start = 1'

[[plugins]]
repo = 'ntpeters/vim-better-whitespace'
on_cmd = ['StripWhitespace', 'ToggleStripWhitespaceOnSave']
hook_add = 'command! WhitespaceStrip :StripWhitespace'

[[plugins]]
repo = 'thinca/vim-template'
on_cmd = 'TemplateLoad'

[[plugins]]
repo = 'deris/vim-pasta'
on_map = [['nx', '<Space>p'], ['nx', '<Space>P']]
hook_source = '''
  let g:pasta_paste_before_mapping = '<Space>P'
  let g:pasta_paste_after_mapping = '<Space>p'
'''

[[plugins]]
repo = 'nocd5/ExpandSerialNumber.vim'
on_cmd = 'ExpandSerialNumber'

[[plugins]]
repo = 'hokorobi/indent-detector.vim'
hook_add = '''
  " FIXME: Vim 起動後、最初に開いたファイルが該当する場合、二回実行される
  autocmd vimrc BufReadPost,FileReadPost *.{css,go,html,js,js9,json,pu,py,rb,vim} :Indentdetector
  autocmd vimrc BufWritePost *.{css,go,html,js,js9,json,pu,py,rb,vim} :Indentdetector 0 2
'''

[[plugins]]
repo = 'vim-scripts/visualrepeat'
on_map = [['v', '.']]

[[plugins]]
repo = 'machakann/vim-swap'
on_map = '<Plug>'
hook_add = 'nmap gs <Plug>(swap-interactive)'
hook_source = 'let g:swap_no_default_key_mappings = 1'

[[plugins]]
repo = 'kana/vim-niceblock'
on_map = ['x', 'I', 'gI', 'A']

# }}}1  Motion {{{1
[[plugins]]
repo = 'easymotion/vim-easymotion'
depends = 'vim-repeat'
on_map = [['nv', '<Plug>'], ['n', 'd'], ['n', 'v']]
hook_add = '''
  "map g/ <Plug>(easymotion-sn)

  NXOmap ss <Plug>(easymotion-overwin-f2)
  NXOmap f <Plug>(easymotion-fl)
  NXOmap F <Plug>(easymotion-Fl)
  NXOmap t <Plug>(easymotion-tl)
  NXOmap T <Plug>(easymotion-Tl)

  let g:EasyMotion_move_highlight = 0
  call submode#enter_with('emn', 'nv', 'r', '<Leader>;', '<Plug>(easymotion-next)')
  call submode#enter_with('emn', 'nv', 'r', '<Leader>,', '<Plug>(easymotion-prev)')
  call submode#map('emn', 'nv', 'r', ';', '<Plug>(easymotion-next)')
  call submode#map('emn', 'nv', 'r', ',', '<Plug>(easymotion-prev)')

  " keep cursor column JK motion
  let g:EasyMotion_startofline = 0
  map <Leader>j <Plug>(easymotion-j)
  map <Leader>k <Plug>(easymotion-k)

  highlight link EasyMotionTarget DiffDelete


  " Quickly make a macro and use it with '.'
  " https://github.com/AndrewRadev/Vimfiles/blob/master/startup/mappings.vim
  "   https://gist.github.com/toshi32tony3/00c441a3619d83d7d97b
  " kana/vim-repeat では使えない
  let s:simple_macro_active = 0
  nnoremap <silent> <M-m> :call <SID>SimpleMacro()<CR>
  nnoremap <silent> <Plug>(_RepeatSimpleMacro) :<C-u>call repeat#wrap('@m', v:count1)<CR>
  function! s:SimpleMacro()
    let s:simple_macro_active = (s:simple_macro_active + 1) % 2
    if  s:simple_macro_active
      echo 'call SimpleMacro()'
      call feedkeys('qm', 'n')
    else
      normal! q
      " remove trailing <A-m>, <C-o>, <Esc>
      let @m = @m[0 : -3]
      let @m = stridx(@m, "\<C-o>") == (len(@m) - 1) ? @m[0 : -2] : @m
      let @m = stridx(@m, "\<Esc>") == (len(@m) - 1) ? @m[0 : -2] : @m
      call repeat#set("\<Plug>(_RepeatSimpleMacro)", 1)
    endif
  endfunction
'''
hook_source = '''
  let g:EasyMotion_do_mapping = 0
  let g:EasyMotion_keys = 'hlasdgyuiopqwertnmzxcvbfkj;'
  let g:EasyMotion_smartcase = 1
  " PCを新しくしたらマシな速さになったみたい
  let g:EasyMotion_use_migemo = 1
  let g:EasyMotion_space_jump_first = 1
  let g:EasyMotion_use_smartsign_us = 1
  let g:EasyMotion_do_shade = 0
'''

[[plugins]]
repo = 'haya14busa/vim-asterisk'
on_map = '<Plug>'
# hook_add 内で使うので勝手に depends
depends = 'vim-anzu'
hook_add = '''
  " http://secret-garden.hatenablog.com/entry/2015/04/07/235941
  map * <Plug>(asterisk-z*)<Plug>(anzu-update-search-status-with-echo)
  map z* <Plug>(asterisk-*)<Plug>(anzu-update-search-status-with-echo)
'''

# カーソル移動位置を遡る
[[plugins]]
repo = 'osyo-manga/vim-milfeulle'
hook_add = '''
  " バッファ単位で移動位置を保存
  let g:milfeulle_default_kind = 'buffer'
  " 位置の保存は CursorMoved
  let g:milfeulle_enable_CursorHold = 0
  let g:milfeulle_enable_InsertLeave = 0
  autocmd vimrc CursorMoved * MilfeulleOverlay

  nmap <C-Left> <Plug>(milfeulle-prev)
  nmap <C-Right> <Plug>(milfeulle-next)
'''

[[plugins]]
repo = 'hokorobi/vim-smarthome'
hook_add = '''
  nmap <silent> <Home> <Plug>(smarthome-n)
  nmap <silent> <C-a> <Plug>(smarthome-n)
  nmap <silent> <M-h> <Plug>(smarthome-n)
  nmap <silent> <Leader>h <Plug>(smarthome-n)
  nmap <silent> 0 <Plug>(smarthome-n)

  nmap <silent> <End> <Plug>(smartend-n)
  nmap <silent> <C-e> <Plug>(smartend-n)
  nmap <silent> <M-l> <Plug>(smartend-n)
  nmap <silent> <Leader>l <Plug>(smartend-n)
  nmap <silent> $ <Plug>(smartend-n)

  imap <silent> <Home> <Plug>(smarthome-i)
  imap <silent> <C-a> <Plug>(smarthome-i)
  imap <silent> <M-h> <Plug>(smarthome-i)

  imap <silent> <End> <Plug>(smartend-i)
  imap <silent> <C-e> <Plug>(smartend-i)
  imap <silent> <M-l> <Plug>(smartend-i)

  vmap <silent> <Home> <Plug>(smarthome-v)
  vmap <silent> <C-a> <Plug>(smarthome-v)
  vmap <silent> <M-h> <Plug>(smarthome-v)
  vmap <silent> <Leader>h <Plug>(smarthome-v)
  vmap <silent> 0 <Plug>(smarthome-v)

  vmap <silent> <End> <Plug>(smartend-v)
  vmap <silent> <C-e> <Plug>(smartend-v)
  vmap <silent> <M-l> <Plug>(smartend-v)
  vmap <silent> <Leader>l <Plug>(smartend-v)
  vmap <silent> $ <Plug>(smartend-v)
'''

[[plugins]]
repo = 'k-takata/matchit.vim'
hook_add = '''
  function! s:set_match_words()
    " Enable these pairs for all file types
    let words = ['(:)', '{:}', '[:]', '（:）', '「:」', '『:』', '【:】']
    if exists('b:match_words')
      for w in words
        if b:match_words !~ '\V' . w
          let b:match_words .= ',' . w
        endif
      endfor
    else
      let b:match_words = join(words, ',')
    endif
  endfunction
  autocmd vimrc BufEnter * call s:set_match_words()
'''

# }}}1  Buffer {{{1
[[plugins]]
repo = 'mhinz/vim-sayonara'
on_cmd = 'Sayonara'
hook_add = '''
  noremap <silent> qq :Sayonara!<CR>
'''

[[plugins]]
repo = 'tyru/capture.vim'
on_cmd = 'Capture'
hook_add = '''
  command! MessCapture :Capture messages
  command! Map :Capture map
  command! Nmap :Capture nmap
  command! Vmap :Capture vmap
  command! Xmap :Capture xmap
  command! Smap :Capture smap
  command! Omap :Capture omap
  command! Imap :Capture imap
  command! Lmap :Capture lmap
  command! Cmap :Capture cmap

  call extend(g:vimrc_altercmd_dic, {
        \ 'cap[ture]': 'Capture',
        \ 'scriptn[ames]': 'Capture scriptnames'})

  autocmd vimrc FileType capture nnoremap <buffer> qq :q<CR>
'''

[[plugins]]
repo = 'ap/vim-buftabline'

[[plugins]]
repo = 'tyru/closesubwin.vim'
on_func = 'closesubwin#'
hook_add ='nnoremap <Leader>q :<C-u>call closesubwin#close_sub_window()<CR>'

# }}}1  File {{{1
[[plugins]]
repo = 'kana/vim-gf-user'
on_map = ['n', 'gf']
hook_source = '''
  call gf#user#extend('vimrc#GfFile', 1000)
'''

[[plugins]]
repo = 'justinmk/vim-dirvish'
hook_add = '''
  let g:dirvish_hijack_netrw = 1

  call extend(g:vimrc_altercmd_dic, {'exp': 'Dirvish'})
'''

[[plugins]]
repo = 'lambdalisue/vim-protocol'
# e https://hoge を一度読み込んでも plugin が読み込まれるまで。
# autoload を読み込むのはもう一度実行したあとになるのでコメントアウト。
# on_path = '^https\?://'

# }}}1  Utility {{{1
[[plugins]]
repo = 'tyru/vim-altercmd'
hook_add = '''
  call altercmd#load()

  function! s:altercmd_load()
    for [key, value] in items(g:vimrc_altercmd_dic)
      execute 'CAlterCommand' key value | AlterCommand <cmdwin> key value
    endfor
  endfunction

  autocmd vimrc VimEnter * call s:altercmd_load()
'''

[[plugins]]
repo = 'tyru/open-browser.vim'
on_map = '<Plug>(openbrowser-'
on_func = 'openbrowser#open'
hook_add = 'NVmap <Leader>o <Plug>(openbrowser-open)'

[[plugins]]
repo = 'kana/vim-altr'
on_map = '<Plug>(altr-forward)'
hook_add = 'nmap <F2> <Plug>(altr-forward)'

[[plugins]]
repo = 'thinca/vim-prettyprint'
on_cmd = 'PP'
hook_add = '''
  call extend(g:vimrc_altercmd_dic, {'pp': 'PP'})
'''

[[plugins]]
repo = 'tpope/vim-repeat'

[[plugins]]
repo = 'mattn/webapi-vim'

[[plugins]]
repo = 'ynkdir/vim-vimlparser'

[[plugins]]
repo = 'vim-scripts/Align'
lazy = 1

[[plugins]]
repo = 'kana/vim-operator-user'

[[plugins]]
repo = 'vim-voom/VOoM'
on_cmd ='Voom'
hook_add = '''
  call extend(g:vimrc_altercmd_dic, {
        \ 'voo[m]': 'Voom rest',
        \  'out[line]': 'Voom rest'})
  autocmd vimrc FileType voomtree nnoremap <buffer> qq :VoomQuitAll<CR>
'''

# }}}1  Web Service {{{1
[[plugins]]
repo = 'lambdalisue/vim-gista'
on_cmd = 'Gista'
on_map = '<Plug>'
depends = 'open-browser.vim'
hook_add = '''
  let g:gista#client#default_username = 'hokorobi'
  call extend(g:vimrc_altercmd_dic, {'gis[ta]': 'Gista'})
'''

[[plugins]]
repo = 'lambdalisue/gina.vim'
on_cmd = 'Gina'
hook_add = '''
  call extend(g:vimrc_altercmd_dic, {'gin[a]': 'Gina'})
  call extend(g:vimrc_altercmd_dic, {'git': 'Gina'})
'''
hook_source = '''
  call gina#custom#command#alias('status', 'st')
  call gina#custom#command#alias('branch', 'b')

  call gina#custom#mapping#nmap('status', 'qq', ':quit<CR>')
  call gina#custom#mapping#nmap('log', 'qq', ':quit<CR>')
  call gina#custom#mapping#nmap('changes', 'qq', ':quit<CR>')
  call gina#custom#mapping#nmap('branch', 'qq', ':quit<CR>')
'''

[[plugins]]
repo = 'mattn/qiita-vim'
on_cmd = 'Qiita'
depends = 'webapi-vim'

[[plugins]]
repo = 'basyura/J6uil.vim'
on_cmd = 'J6uil'
depends = 'open-browser.vim'
hook_source = '''
  source ~/_vim/_vimrc_lingr.local

  " ImageMagick の convert でアイコン作成
  " ImageMagick-6.9.0-0-Q16-x64-static だと動いたが、
  " ImageMagick-6.9.0-0-Q16-x64-dll だと動かなかった。
  " コマンドプロンプトでは変わらず実行できるのに……
  " 環境変数を Vim で変えることもできる
  " let $PATH = "C:/path/to/ImageMagick;" . $PATH
  let g:J6uil_display_icon = 1

  let g:J6uil_empty_separator = 1
  let g:J6uil_config_dir = expand('~/_vim/.J6uil')
  let g:J6uil_no_default_keymappings = 1
  " 名前の長さに併せて発言を整列しない。人によって位置がずれるのが嫌
  let g:J6uil_align_message = 0

  " メンバー表示がされない、ウィンドウサイズがおかしい、バッファ名もずれている？
  " let g:J6uil_multi_window = 1

  autocmd vimrc FileType J6uil call s:J6uil_settings()
  function! J6uil_reply()
    let repl = substitute(getline('.'), '^\s\+', '> ', '')
    call J6uil#say#open(J6uil#buffer#current_room())
    call append(0, repl)
  endfunction
  function! s:J6uil_settings()
    nmap <silent> <buffer> <Leader>s <Plug>(J6uil_open_say_buffer)
    nmap <silent> <buffer> i <Plug>(J6uil_open_say_buffer)
    nmap <silent> <buffer> o <Plug>(J6uil_action_open_links)
    nmap <silent> <buffer> <CR> <Plug>(J6uil_action_enter)
    nnoremap <silent> <buffer> r :<C-u>call J6uil_reply()<CR>
    setlocal nofoldenable
  endfunction
  autocmd vimrc FileType J6uil_say call s:J6uil_say_settings()
  function! s:J6uil_say_settings()
    nnoremap <silent> <buffer> qq :quit<CR>
    inoremap <silent> <buffer> <C-CR> <ESC>:call <SID>post_message()<CR>
  endfunction
'''

[[plugins]]
repo = 'yasuharu519/vim-codic'
on_cmd = 'VimCodic'
hook_add = '''
  let g:vim_codic_access_token = g:codic_token
  call extend(g:vimrc_altercmd_dic, {'cod[ic]': 'VimCodic'})
'''

# }}}1  Others {{{1
[[plugins]]
repo = 'gregsexton/VimCalc'
on_cmd = 'Calc'

[[plugins]]
repo = 'thinca/vim-submode'
hook_add = '''
  let g:submode_keep_leaving_key = 1
  let g:submode_timeout = 0

  " move to next/previous fold
  call submode#enter_with('move-to-fold', 'n', '', 'zj', 'zj')
  call submode#enter_with('move-to-fold', 'n', '', 'zk', 'zk')
  call submode#map('move-to-fold', 'n', '', 'j', 'zj')
  call submode#map('move-to-fold', 'n', '', 'k', 'zk')

  " 時系列 undo/redo
  call submode#enter_with('undo/redo', 'n', '', 'g-', 'g-')
  call submode#enter_with('undo/redo', 'n', '', 'g+', 'g+')
  call submode#map('undo/redo', 'n', '', '-', 'g-')
  call submode#map('undo/redo', 'n', '', '+', 'g+')

  "https://raw.githubusercontent.com/ryotako/dotfiles/52b1ecb275e577dcb44db367a1f563d471c2cab0/.vimrc
  " x 連打削除を一つの undo で戻るように
  call submode#enter_with('x', 'n', '', 'x', '"_x')
  call submode#map('x', 'n', '', 'x', ":<C-u>undojoin <bar> normal! \"_x<CR>")

  " diff
  call submode#enter_with('diff', 'n', '', 'dn', ']c')
  call submode#enter_with('diff', 'n', '', 'dp', '[c')
  call submode#map('diff', 'n', '', 'n', ']c')
  call submode#map('diff', 'n', '', 'p', '[c')
  call submode#enter_with('diff', 'n', '', 'dj', ']c')
  call submode#enter_with('diff', 'n', '', 'dk', '[c')
  call submode#map('diff', 'n', '', 'j', ']c')
  call submode#map('diff', 'n', '', 'k', '[c')

  " Visual モード時のインクリメント、デクリメント
  " http://vim-jp.org/blog/2015/06/30/visual-ctrl-a-ctrl-x.html
  if has('patch-7.4.754')
    call submode#enter_with('vinc', 'v', '', '<Leader>a', '<c-a>gv')
    call submode#enter_with('vinc', 'v', '', '<Leader>x', '<c-x>gv')
    call submode#map('vinc', 'v', '', 'a', '<c-a>gv')
    call submode#map('vinc', 'v', '', 'x', '<c-x>gv')
  endif
'''

[[plugins]]
repo = 'hokorobi/vim-hg'
hook_add = '''
  call extend(g:vimrc_altercmd_dic, {'hg': 'Hg'})
'''

[[plugins]]
repo = 'vim-jp/vital.vim'
depends = 'vital-System-Job'
on_cmd = 'Vitalize'

[[plugins]]
repo = 'lambdalisue/vital-System-Job'
lazy = 1

# }}}
