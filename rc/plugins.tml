#       dein {{{1
[[plugins]]
repo = 'Shougo/dein.vim'

# }}}1  deoplete {{{1
[[plugins]]
repo = 'Shougo/deoplete.nvim'
on_event = 'InsertEnter'
depends = ['nvim-yarp', 'vim-hug-neovim-rpc', 'neco-syntax', 'neosnippet.vim']
hook_source = '''
  let g:python3_host_prog = expand('~/AppData/Local/Programs/Python/Python35/python.exe')
  let g:deoplete#enable_at_startup = 1

  call deoplete#custom#source('_', 'converters', [
        \ 'converter_remove_paren',
        \ 'converter_remove_overlap',
        \])
  " 日本語入力時の勝手に確定を抑制するため
  call deoplete#custom#option('min_pattern_length', 3)
'''

[[plugins]]
repo = 'roxma/nvim-yarp'

[[plugins]]
repo = 'roxma/vim-hug-neovim-rpc'

[[plugins]]
repo = 'Shougo/neco-syntax'
lazy = 1

[[plugins]]
repo = 'davidhalter/jedi-vim'
on_ft = 'python'
hook_source = '''
  let g:jedi#auto_vim_configuration = 0
  let g:jedi#popup_select_first = 0
  let g:jedi#popup_on_dot = 0

  " deoplete
  let g:jedi#show_call_signatures = 0
  let g:jedi#completions_enabled = 0
  let g:jedi#auto_vim_configuration = 0
'''

[[plugins]]
repo = 'zchee/deoplete-jedi'
on_ft = 'python'

[[plugins]]
repo = 'Shougo/neco-vim'
on_ft = 'vim'

[[plugins]]
repo = 'zchee/deoplete-go'
on_ft = 'go'

# }}}1  Quickrun {{{1
[[plugins]]
repo = 'thinca/vim-quickrun'
on_cmd = 'QuickRun'
on_map = '<Plug>'
depends = 'shabadou.vim'
hook_add = '''
  call extend(g:vimrc_altercmd_dic, {'quic[krun]': 'Quickrun'})
'''
hook_source = '''
  let g:quickrun_config = get(g:, 'quickrun_config', {})
  let g:quickrun_config._ = {
        \   'runner': 'job',
        \   'outputter': 'buffer',
        \   'outputter/buffer/close_on_empty': 1,
        \ }
'''

[[plugins]]
repo = 'osyo-manga/vim-watchdogs'
on_cmd = 'WatchdogsRun'
depends = ['vim-quickrun', 'shabadou.vim']
hook_add = '''
  nnoremap <Leader>w :<C-u>WatchdogsRun<CR>
'''
hook_source = '''
  let g:quickrun_config['watchdogs_checker/_'] = {
        \   'hook/echo/enable': 1,
        \   'hook/echo/output_success': '> No Errors Found.',
        \}
  if executable('rst-lint')
    let g:quickrun_config['rst/watchdogs_checker'] = {
          \   'type': 'watchdogs_checker/rst-lint'
          \ }
    let g:quickrun_config['watchdogs_checker/rst-lint'] = {
          \   'command': 'rst-lint',
          \   'exec': '%c %o %s:p ' ,
          \   'cmdopt': '--encoding '.&fileencoding,
          \   'quickfix/errorformat': 'INFO %f:%l %m',
          \ }
  endif
'''

[[plugins]]
repo = 'osyo-manga/shabadou.vim'

# }}}1  Text Object {{{1
[[plugins]]
repo = 'kana/vim-textobj-user'

[[plugins]]
repo = 'mattn/vim-textobj-url'
depends = 'vim-textobj-user'

[[plugins]]
repo = 'terryma/vim-expand-region'
on_map = '<Plug>(expand_region'
hook_source = '''
  " ad: delimited
  " ib, ab: sandwich
  " ii, ai, iI, aI: indent
  " ac: comment
  " ac, iv: variable
  let g:expand_region_text_objects = {
        \ 'iv': 0,
        \ 'av': 0,
        \ 'iw': 0,
        \ 'iW': 0,
        \ 'iu': 0,
        \ 'ad': 0,
        \ 'ib': 1,
        \ 'ab': 1,
        \ 'ac': 0,
        \ 'iI': 0,
        \ 'aI': 0,
        \ 'ii': 0,
        \ 'ai': 0,
        \ }
'''

[[plugins]]
repo = 'machakann/vim-sandwich'
on_map = '<Plug>(operator-sandwich-'
on_source = 'vim-expand-region'
hook_add = '''
  NXmap s <Nop>

  nmap sc  <Plug>(operator-sandwich-replace)<Plug>(operator-sandwich-release-count)<Plug>(textobj-sandwich-query-a)
  nmap scc <Plug>(operator-sandwich-replace)<Plug>(operator-sandwich-release-count)<Plug>(textobj-sandwich-auto-a)
  nmap css <Plug>(operator-sandwich-replace)<Plug>(operator-sandwich-release-count)<Plug>(textobj-sandwich-auto-a)
  XOmap sc <Plug>(operator-sandwich-replace)

  nmap sr  <Plug>(operator-sandwich-replace)<Plug>(operator-sandwich-release-count)<Plug>(textobj-sandwich-query-a)
  nmap srr <Plug>(operator-sandwich-replace)<Plug>(operator-sandwich-release-count)<Plug>(textobj-sandwich-auto-a)
  nmap rss <Plug>(operator-sandwich-replace)<Plug>(operator-sandwich-release-count)<Plug>(textobj-sandwich-auto-a)
  XOmap sr <Plug>(operator-sandwich-replace)

  nmap sd  <Plug>(operator-sandwich-delete)<Plug>(operator-sandwich-release-count)<Plug>(textobj-sandwich-query-a)
  nmap sdd <Plug>(operator-sandwich-delete)<Plug>(operator-sandwich-release-count)<Plug>(textobj-sandwich-auto-a)
  nmap dss <Plug>(operator-sandwich-delete)<Plug>(operator-sandwich-release-count)<Plug>(textobj-sandwich-auto-a)
  XOmap sd <Plug>(operator-sandwich-delete)

  nmap saa <Plug>(operator-sandwich-add)<Plug>(operator-sandwich-release-count)<Plug>(textobj-sandwich-auto-a)
  NXOmap sa <Plug>(operator-sandwich-add)
'''
hook_source = '''
  let g:sandwich_no_default_key_mappings = 1
  let g:textobj#sandwich#stimeoutlen = 100
  let g:sandwich#recipes = deepcopy(g:sandwich#default_recipes)

  let g:sandwich#recipes += [{'buns': ['「', '」']}]
  let g:sandwich#recipes += [{'buns': ['【', '】']}]
  let g:sandwich#recipes += [{'buns': ['（', '）']}]
  let g:sandwich#recipes += [{'buns': ['『', '』']}]
'''

[[plugins]]
repo = 'machakann/vim-textobj-delimited'
on_source = 'vim-expand-region'
hook_source = '''
  let g:textobj_delimited_patterns = [[', *', '\m\%(, *\)\?\%([^,[\]{}]\+, *\)\+\%([^,[\]{}]\+\)\?']]
'''

[[plugins]]
repo = 'tommcdo/vim-exchange'
on_map = [['n', 'cx'], ['x', 'X']]

[[plugins]]
repo = 'kana/vim-textobj-indent'
depends = 'vim-textobj-user'

[[plugins]]
repo = 'glts/vim-textobj-comment'
depends = 'vim-textobj-user'

[[plugins]]
repo = 'Julian/vim-textobj-variable-segment'
depends = 'vim-textobj-user'

# }}}1  Language, Format, Filetype {{{1
[[plugins]]
repo = 'tyru/caw.vim'
on_map = '<Plug>(caw:prefix)'
hook_add = '''
  NVmap gc <Plug>(caw:prefix)
  " 現在行をコピーしてコメントアウト
  nmap gcy yypgcIk
  " 選択範囲をコピーしてコメントアウト
  vmap gcy ygvgcIp
'''

# diff {{{2
[[plugins]]
repo = 'AndrewRadev/linediff.vim'
on_cmd = 'Linediff'
hook_add = '''
  call extend(g:vimrc_altercmd_dic, {'diffl[ine]': 'Linediff'})
'''
hook_source = '''
  let g:linediff_modify_statusline = 0
'''

[[plugins]]
repo = 'lambdalisue/vim-diffa'
on_ft = 'diff'

# }}}2 Python {{{2
[[plugins]]
repo = 'hdima/python-syntax'
hook_add = '''
  let g:python_hightlight_all = 1
'''

[[plugins]]
repo = 'hynek/vim-python-pep8-indent'

#}}}2 Golang {{{2
[[plugins]]
repo = 'fatih/vim-go'
on_ft = 'go'
hook_source = '''
  " GoFmt でも goimports を使う
  if Vimrc_executable('goimports')
    let g:go_fmt_command = 'goimports'
  endif
  let g:go_gocode_socket_type = 'tcp'

  " run :GoBuild or :GoTestCompile based on the go file
  function! s:build_go_files()
    let l:file = expand('%')
    if l:file =~# '^\f\+_test\.go$'
      call go#test#Test(0, 1)
    elseif l:file =~# '^\f\+\.go$'
      call go#cmd#Build(0)
    endif
  endfunction

  autocmd vimrc FileType go nmap <buffer> <Leader>gb <Plug>(go-build)
  autocmd vimrc FileType go nmap <buffer> <Leader>gr <Plug>(go-run)
  autocmd vimrc FileType go nmap <buffer> <Leader>gt <Plug>(go-test)
  autocmd vimrc FileType go nmap <buffer> <Leader>gc <Plug>(go-coverage-toggle)
  autocmd vimrc FileType go nmap <buffer> <F2> <Plug>(go-alternate-edit)
  autocmd vimrc FileType go nnoremap <buffer> <Leader>gf :GoDecls<CR>

  call extend(g:vimrc_altercmd_dic, {
        \ 'godo[c]': 'GoDoc',
        \ 'goru[n]': 'GoRun',
        \})

  " Sayonara
  let g:sayonara_filetypes = get(g:, 'sayonara_filetypes', {})
  let g:sayonara_filetypes.godoc = 'bdelete'
'''

[[plugins]]
repo = 'hokorobi/godoctor.vim'
on_ft = 'go'
frozen = 1
hook_source = '''
  autocmd vimrc FileType go xnoremap <buffer> <Leader>ge :GoRefactor extract<Space>
'''

#}}}2 Markdown {{{2
[[plugins]]
repo = 'kannokanno/previm'
on_cmd = 'PrevimOpen'
depends = 'open-browser.vim'

[[plugins]]
repo = 'plasticboy/vim-markdown'

[[plugins]]
repo = 'moorereason/vim-markdownfmt'
on_ft = 'markdown'
hook_source = '''
  let g:markdownfmt_autosave = 1
'''

#}}}2 Others {{{2
[[plugins]]
repo = 'vim-jp/syntax-vim-ex'

[[plugins]]
repo = 'pangloss/vim-javascript'

[[plugins]]
repo = 'mattn/vim-sqlfmt'
on_ft = 'sql'

[[plugins]]
repo = 'PProvost/vim-ps1'
hook_add = '''
  autocmd vimrc BufNewFile,BufRead *.ps1 setfiletype ps1
'''

[[plugins]]
repo = 'hokorobi/plantuml-syntax'
frozen = 1

[[plugins]]
repo = 'cespare/vim-toml'
hook_add = '''
  autocmd vimrc BufNewFile,BufRead *.tml setfiletype toml
'''

[[plugins]]
repo = 'osyo-manga/vim-precious'
depends = 'context_filetype.vim'
on_ft = ['markdown', 'toml']
hook_source = '''
  " FIXME: 起動後最初に toml を開いた際にカーソルが Vim script の位置にあると ft が vim になり、
  "        Insert mode で toml になる？　Normal mode に戻ってカーソルを移動するとすべてが範囲外相当
  "        の色になる。開き直すと正常になる。

  let g:precious_enable_switchers = {
  \   '*':        {'setfiletype' : 0},
  \   'markdown': {'setfiletype' : 1},
  \   'toml':     {'setfiletype' : 1},
  \ }

  " カーソル移動時の自動切り替えを無効化
  let g:precious_enable_switch_CursorMoved   = {"*" : 0}
  let g:precious_enable_switch_CursorMoved_i = {"*" : 0}
  let g:precious_enable_switch_CursorHold    = {"*" : 0}

  " insert に入った時にスイッチし、抜けた時に元に戻す
  autocmd vimrc InsertEnter * :PreciousSwitch
  autocmd vimrc InsertLeave * :PreciousReset
'''

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'hnamikaw/vim-autohotkey'

[[plugins]]
repo = 'hokorobi/riv.vim'
frozen = 1
on_ft = 'rst'
hook_source = '''
  let g:riv_global_leader = 'e'
'''

#}}}2

# }}}1  tags {{{1
[[plugins]]
repo = 'hokorobi/vim-tagsgen'
on_cmd = 'Tagsgen'
depends = 'vim-system_job'

# }}}1  Look {{{1
[[plugins]]
repo = 'cocopon/iceberg.vim'

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
  let g:unite_force_overwrite_statusline = 0
  let g:vimfiler_force_overwrite_statusline = 0
  let g:vimshell_force_overwrite_statusline = 0

  let g:lightline = {
        \ 'colorscheme': 'default',
        \ 'active': {
        \   'left': [['mode', 'paste'], ['readonly', 'filename', 'modified', 'pwd']],
        \   'right': [['lineinfo'], ['fileformat', 'fenc', 'filetype']]},
        \ 'component_function': {
        \   'pwd': 'getcwd',
        \   'fenc': 'LightLineFenc',
        \   'modified': 'LightlineModified',
        \   }
        \ }

  " help で - が表示されないように
  function! LightlineModified()
    return &modifiable && &modified ? '+' : ''
  endfunction

  function! LightLineFenc() abort
    if winwidth(0) < 70
      return ''
    endif

    let fenc = &fileencoding == '' ? &encoding : &fileencoding
    return fenc !=# 'utf-8' ? fenc : &bomb ? fenc . ' (BOM)' : fenc
  endfunction
'''

[[plugins]]
repo = 'osyo-manga/vim-anzu'
on_map = '<Plug>'
on_source = 'vim-asterisk'
hook_add = '''
  " https://raw.githubusercontent.com/DeaR/dotfiles/master/.vimrc
  XOmap <expr> n v:searchforward ? 'n' : 'N'
  XOmap <expr> N v:searchforward ? 'N' : 'n'
  nmap <expr> n v:searchforward ? '<Plug>(anzu-n-with-echo)' : '<Plug>(anzu-N-with-echo)'
  nmap <expr> N v:searchforward ? '<Plug>(anzu-N-with-echo)' : '<Plug>(anzu-n-with-echo)'
'''

[[plugins]]
# 遅延読み込みだと前回起動時のマークが復元されない様子
repo = 'MattesGroeger/vim-bookmarks'
hook_add = '''
  " bookmark_auto_save_file が無効になるので g:bookmark_manage_per_buffer は 1 にしない
  let g:bookmark_auto_save_file = expand('~/_vim/.vim-bookmarks')

  let g:bookmark_sign = '>>'
  let g:bookmark_annotation_sign = '##'

  " ctrlp でファイル名を表示できないようなので従来の BookmarkShowAll を使用する
  let g:bookmark_disable_ctrlp = 1

  " ブックマークを開いたら候補のウィンドウは閉じる
  let g:bookmark_auto_close = 1
'''

[[plugins]]
repo = 'itchyny/vim-cursorword'

# replace matchparen
[[plugins]]
repo = 'itchyny/vim-parenmatch'

[[plugins]]
repo = 't9md/vim-quickhl'
on_map = '<Plug>'
hook_add = '''
  NXmap <Leader>m <Plug>(quickhl-manual-this)
  NXmap <Leader>M <Plug>(quickhl-manual-reset)
'''

# }}}1  Input & Edit {{{1
[[plugins]]
repo = 'cohama/lexima.vim'
on_event = ['InsertEnter', 'CmdlineEnter']
hook_source = '''
  source ~/vimfiles/rc/lexima.vim
'''

[[plugins]]
repo = 'machakann/vim-highlightedyank'
hook_add = '''
  let g:highlightedyank_highlight_duration = 300
  highlight link HighlightedyankRegion Visual

  if !exists("##TextYankPost")
    " nmap にすると yy で固まる
    map y <Plug>(highlightedyank)
    nmap Y <Plug>(highlightedyank)$

    " 行をクリップボードへコピー（末尾改行なし、カーソル移動なし）
    " 遅延読み込みでは初回実行時にコピーされなかった。
    nnoremap <silent> <Leader>yy :call <SID>Linecopy()<CR>
    function! s:Linecopy() abort
      let view = winsaveview()
      execute 'normal' "0vg_\"+\<Plug>(highlightedyank)"
      silent call winrestview(view)
    endfunction
  endif
'''

[[plugins]]
repo = 'kana/vim-operator-replace'
on_map = '<Plug>'
depends = 'vim-operator-user'
hook_add = '''
  vmap p <Plug>(operator-replace)
'''

[[plugins]]
repo = 'Shougo/neosnippet.vim'
depends = 'neosnippet-snippets'
hook_source = '''
  " <TAB>: completion.
  inoremap <expr> <S-TAB> pumvisible() ? '<C-p>' : '<S-TAB>'

  " Plugin key-mappings.
  imap <C-k> <Plug>(neosnippet_expand_or_jump)
  smap <C-k> <Plug>(neosnippet_expand_or_jump)

  " SuperTab like snippets behavior.
  imap <expr> <TAB> neosnippet#jumpable() ? '<Plug>(neosnippet_expand_or_jump)' : pumvisible() ? '<C-n>' : '<TAB>'
  smap <expr> <TAB> neosnippet#jumpable() ? '<Plug>(neosnippet_expand_or_jump)' : '<TAB>'

  let g:neosnippet#data_directory = expand('~/_vim/.neosnippet')

  " Tell Neosnippet about the other snippets
  " gosnippets は vim-go がうまいことやってくれるはずだけど、なんかうまくいかないので直接追加。
  let g:neosnippet#snippets_directory = [
        \   '~/vimfiles/snippets',
        \   '~/_vim/dein/repos/github.com/honza/vim-snippets/snippets/',
        \   '~/_vim/dein/repos/github.com/fatih/vim-go/gosnippets/snippets/',
        \ ]
'''

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]]
repo = 'honza/vim-snippets'
# snippets ファイルだけを使うので runtimepath へ追加しない
rtp = ''

[[plugins]]
repo = 'uplus/vim-clurin'
on_map = '<Plug>'
# 設定に ''' が入っているので """ """ でくくらないと駄目。
hook_add = """
  nmap + <Plug>(clurin-next)
  nmap - <Plug>(clurin-prev)
"""
hook_source = """
  function! g:Speeddating(cnt) abort
    if a:cnt < 0
      call speeddating#increment(-v:count1)
    else
      call speeddating#increment(v:count1)
    endif
  endfunction

  let g:clurin = {
        \   '-': {
        \     'use_default': 0,
        \     'def': [
        \       ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'],
        \       ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'],
        \       ['月', '火', '水', '木', '金', '土', '日'],
        \       ['true', 'false'],
        \       ['True', 'False'],
        \       ['on', 'off'],
        \       ['enable', 'disable'],
        \       ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
        \       ['yes', 'no'],
        \       ['left', 'right'],
        \       ['=', ' = '],
        \       ['+', ' + '],
        \       ['-', ' - '],
        \       ['*', ' * '],
        \       ['/', ' / '],
        \       ['pick', 'fold', 'mess', 'edit', 'drop'],],
        \     'nomatch': function('g:Speeddating')},
        \   'toml vim': {
        \     'def': [[
        \       {'pattern': '"\([^"]*\)"'  , 'replace': '"\1"'},
        \       {'pattern': '''\([^'']*\)''', 'replace': '''\1'''}]]},
        \}
"""

[[plugins]]
repo = 'tpope/vim-speeddating'
on_func = 'speeddating#'

[[plugins]]
repo = 'junegunn/vim-easy-align'
on_cmd = 'EasyAlign'
on_map = '<Plug>(EasyAlign'
depends = ['vim-repeat', 'visualrepeat']
hook_add = '''
  vmap <Enter> <Plug>(EasyAlign)
'''

[[plugins]]
repo = 'mbbill/undotree'
on_cmd = 'UndotreeToggle'
hook_add = '''
  call extend(g:vimrc_altercmd_dic, {
        \   'undot[reetoggle]': 'UndotreeToggle',
        \ })
'''
hook_source = '''
  let g:undotree_WindowLayout = 2
  let g:undotree_SetFocusWhenToggle = 1
  let g:undotree_ShortIndicators = 1
'''

[[plugins]]
repo = 'osyo-manga/vim-jplus'
on_map = '<Plug>'
hook_add = '''
  " 空白を削除して行を結合
  " 空白ありで連結のほうが使うことが多い。
  "NVmap J <Plug>(jplus-input)<CR>

  " 空白を削除した上で任意の文字を挿入して行を結合
  NVmap <Leader>J <Plug>(jplus-input)
'''

[[plugins]]
repo = 'LeafCage/yankround.vim'
on_map = '<Plug>'
on_cmd = 'CtrlPYankRound'
hook_add = '''
  nnoremap <Leader>fp :<C-u>CtrlPYankRound<CR>

  NXmap <expr> P yankround#is_active() ? '<Plug>(myyr)' : '<Plug>(yankround-P)'
  NXmap <expr> p yankround#is_active() ? '<Plug>(myyr)' : '<Plug>(yankround-p)'

  let g:yankround_dir = expand('~/_vim/.yankround')
  let g:yankround_use_region_hl = 1
'''

# g<C-a> などは同行での連番はできないようなので、まだ有用
[[plugins]]
repo = 'deris/vim-rengbang'
on_cmd = ['RengBang', 'RengBangUsePrev', 'RengBangConfirm']
hook_source = '''
  let g:rengbang_default_start = 1
'''

[[plugins]]
repo = 'ntpeters/vim-better-whitespace'
on_cmd = ['StripWhitespace', 'ToggleStripWhitespaceOnSave']
hook_add = '''
  command! WhitespaceStrip :StripWhitespace
'''

[[plugins]]
repo = 'thinca/vim-template'
on_cmd = 'TemplateLoad'
hook_add = '''
  if exists('g:howm_dir') && isdirectory(g:howm_dir)
    nnoremap <Leader>,c :call vimrc#EditHowmNew(g:howm_dir)<CR>
  endif
'''

[[plugins]]
repo = 'deris/vim-pasta'
on_map = [['nx', '<Space>p'], ['nx', '<Space>P']]
hook_source = '''
  let g:pasta_paste_before_mapping = '<Space>P'
  let g:pasta_paste_after_mapping = '<Space>p'
'''

[[plugins]]
repo = 'nocd5/ExpandSerialNumber.vim'
on_cmd = 'ExpandSerialNumber'

[[plugins]]
repo = 'lambdalisue/vim-findent'
on_cmd = ['Findent', 'FindentRestore']
hook_add = '''
  let g:findent#enable_messages = 0
  autocmd vimrc FileType autohotkey,javascript,json,plantuml,python,ruby,vim Findent
'''

[[plugins]]
repo = 'machakann/vim-swap'
on_map = '<Plug>'
hook_add = '''
  nmap g< <Plug>(swap-prev)
  nmap g> <Plug>(swap-next)
  nmap gs <Plug>(swap-interactive)
'''
hook_source = '''
  let g:swap_no_default_key_mappings = 1
  let g:swap#rules = deepcopy(g:swap#default_rules)
  let g:swap#rules += [{
        \   "delimiter": ['\t'],
        \   "body": '.\+',
        \ }]
'''

# ビジュアル選択した状態でも I, A を効かせる
[[plugins]]
repo = 'kana/vim-niceblock'
on_map = [['x', 'I'], ['x', 'gI'], ['x', 'A']]

# }}}1  Motion {{{1
[[plugins]]
repo = 'easymotion/vim-easymotion'
depends = 'vim-repeat'
on_map = [['nv', '<Plug>'], ['n', 'c'], ['n', 'd'], ['n', 'v']]
hook_add = '''
  "map g/ <Plug>(easymotion-sn)

  NXOmap ss <Plug>(easymotion-overwin-f2)
  NXOmap f <Plug>(easymotion-fl)
  NXOmap F <Plug>(easymotion-Fl)
  NXOmap t <Plug>(easymotion-tl)
  NXOmap T <Plug>(easymotion-Tl)

  let g:EasyMotion_move_highlight = 0

  highlight link EasyMotionTarget DiffDelete
'''
hook_source = '''
  let g:EasyMotion_do_mapping = 0
  let g:EasyMotion_keys = 'hlasdgyuiopqwertnmzxcvbfkj;'
  let g:EasyMotion_smartcase = 1
  " PCを新しくしたらマシな速さになったみたい
  let g:EasyMotion_use_migemo = 1
  let g:EasyMotion_space_jump_first = 1
  let g:EasyMotion_use_smartsign_us = 1
  let g:EasyMotion_do_shade = 0
'''

[[plugins]]
repo = 'haya14busa/vim-edgemotion'
on_map = '<Plug>'
hook_add = '''
  map <Leader>j <Plug>(edgemotion-j)
  map <Leader>k <Plug>(edgemotion-k)
'''

[[plugins]]
repo = 'haya14busa/vim-asterisk'
on_map = '<Plug>'
hook_add = '''
  " http://secret-garden.hatenablog.com/entry/2015/04/07/235941
  map * <Plug>(asterisk-z*)<Plug>(anzu-update-search-status-with-echo)
  map z* <Plug>(asterisk-*)<Plug>(anzu-update-search-status-with-echo)
'''

# カーソル移動位置を遡る
[[plugins]]
repo = 'osyo-manga/vim-milfeulle'
hook_add = '''
  " バッファ単位で移動位置を保存
  let g:milfeulle_default_kind = 'buffer'
  " 位置の保存は CursorMoved
  let g:milfeulle_enable_CursorHold = 0
  let g:milfeulle_enable_InsertLeave = 0
  autocmd vimrc CursorMoved * MilfeulleOverlay

  nmap <C-Left> <Plug>(milfeulle-prev)
  nmap <C-Right> <Plug>(milfeulle-next)
'''

[[plugins]]
repo = 'hokorobi/vim-smarthome'
on_map = [['nxi', '<Plug>']]
frozen = 1
hook_add = '''
  NXImap <silent> <Home> <Plug>(smarthome-home)
  NXImap <silent> <C-a> <Plug>(smarthome-home)
  NXImap <silent> <M-h> <Plug>(smarthome-home)
  NVmap <silent> <Leader>h <Plug>(smarthome-home)
  NVmap <silent> 0 <Plug>(smarthome-home)

  NXImap <silent> <End> <Plug>(smarthome-end)
  NXImap <silent> <C-e> <Plug>(smarthome-end)
  NXImap <silent> <M-l> <Plug>(smarthome-end)
  NVmap <silent> <Leader>l <Plug>(smarthome-end)
  NVmap <silent> $ <Plug>(smarthome-end)
'''

[[plugins]]
repo = 'k-takata/matchit.vim'
hook_add = '''
  function! s:set_match_words()
    " Enable these pairs for all file types
    let words = ['(:)', '{:}', '[:]', '（:）', '「:」', '『:』', '【:】']
    if exists('b:match_words')
      for w in words
        if b:match_words !~ '\V' . w
          let b:match_words .= ',' . w
        endif
      endfor
    else
      let b:match_words = join(words, ',')
    endif
  endfunction
  autocmd vimrc BufEnter * call s:set_match_words()
'''

[[plugins]]
repo = 'hokorobi/cmdlineplus.vim'
frozen = 1
on_map = [['c', '<Plug>']]
hook_add = '''
  cmap <A-f> <Plug>(cmdlineplus-f)
  cmap <A-S-f> <Plug>(cmdlineplus-F)
  cmap <A-t> <Plug>(cmdlineplus-t)
  cmap <A-S-t> <Plug>(cmdlineplus-T)
  cmap <A-d> <Plug>(cmdlineplus-df)
  cmap <A-S-d> <Plug>(cmdlineplus-dF)
  cmap <C-k> <Plug>(cmdlineplus-killline)
  cmap <A-;> <Plug>(cmdlineplus-;)
  cmap <A-:> <Plug>(cmdlineplus-,)
  cmap <A-,> <Plug>(cmdlineplus-,)
'''

# }}}1  Buffer {{{1
[[plugins]]
repo = 'mhinz/vim-sayonara'
on_cmd = 'Sayonara'
hook_add = '''
  noremap <silent> qq :Sayonara!<CR>
'''
hook_source = '''
  let g:sayonara_filetypes = get(g:, 'sayonara_filetypes', {})
  let g:sayonara_filetypes.qf = 'bdelete'
  let g:sayonara_filetypes.help = 'bdelete!'
'''

[[plugins]]
repo = 'tyru/capture.vim'
on_cmd = 'Capture'
hook_add = '''
  command! MessCapture :Capture messages
  command! Map :Capture map
  command! Nmap :Capture nmap
  command! Vmap :Capture vmap
  command! Xmap :Capture xmap
  command! Smap :Capture smap
  command! Omap :Capture omap
  command! Imap :Capture imap
  command! Lmap :Capture lmap
  command! Cmap :Capture cmap

  call extend(g:vimrc_altercmd_dic, {
        \   'cap[ture]': 'Capture',
        \   'scriptn[ames]': 'Capture scriptnames',
        \ })
'''
hook_source = '''
  " Sayonara
    let g:sayonara_filetypes = get(g:, 'sayonara_filetypes', {})
    let g:sayonara_filetypes.capture = 'bdelete'
'''

[[plugins]]
repo = 'ap/vim-buftabline'

[[plugins]]
repo = 'tyru/closesubwin.vim'
on_func = 'closesubwin#'
hook_add ='''
  nnoremap <Leader>q :<C-u>call closesubwin#close_sub_window()<CR>
  " タブを直接指定するマッピングは不要なので 0 にしたいけどエラーになるので 1 へ
  let g:buftabline_plug_max = 1
'''

# }}}1  File {{{1
[[plugins]]
repo = 'kana/vim-gf-user'
on_map = ['n', 'gf']
hook_source = '''
  " Windows でも行数指定の記述を gf で開けるようにする
  " http://thinca.hatenablog.com/entry/20140324/1395590910
  call gf#user#extend('vimrc#GfFile', 1000)
'''

# diff でも gf を可能にする
[[plugins]]
repo = 'kana/vim-gf-diff'
on_ft = 'diff'
depends = 'vim-gf-user'

[[plugins]]
repo = 'justinmk/vim-dirvish'
hook_add = '''
  let g:dirvish_hijack_netrw = 1

  call extend(g:vimrc_altercmd_dic, {'exp': 'Dirvish'})
'''

[[plugins]]
# FIXME: 起動後の初回実行時に実体の内容が2回繰り返して表示される
# sample: :e https://raw.githubusercontent.com/Mathiasb17/mathias/f3ad028eafcc56ddd4d72019cb6a1818e456d099/.config/nvim/init.vim
repo = 'lambdalisue/vim-protocol'
on_path = '^https\?://'

[[plugins]]
repo = 'airblade/vim-rooter'
on_event = 'BufRead'

# }}}1  Utility {{{1
[[plugins]]
repo = 'tyru/vim-altercmd'
on_cmd = ['AlterCommand', 'CAlterCommand']
hook_add = '''
  function! s:altercmd_load()
    for [key, value] in items(g:vimrc_altercmd_dic)
      " AlterCommand と CAlterCommand は同じ
      execute 'CAlterCommand' key value | AlterCommand <cmdwin> key value
    endfor
  endfunction

  autocmd vimrc VimEnter * call s:altercmd_load()
'''

[[plugins]]
repo = 'tyru/open-browser.vim'
on_map = '<Plug>(openbrowser-'
on_func = 'openbrowser#open'
hook_add = '''
  nmap <Leader>oo <Plug>(openbrowser-open)
  NVmap <Leader>o <Plug>(openbrowser-open)

  function! s:open_github_repository() abort
    let backup_z = @z
    let @z = ''
    normal! "zyi'
    if @z ==# ''
      normal! "zyi"
      if @z ==# ''
        let @z = backup_z
        return
      endif
    endif

    if stridx(@z, '/') != -1
      call openbrowser#open('https://github.com/' . @z)
    endif
    let @z = backup_z
  endfunction
  command! OpenBrowserGithubRepo call s:open_github_repository()
  nnoremap <Leader>og :<C-u>OpenBrowserGithubRepo<CR>
'''

[[plugins]]
repo = 'tyru/open-browser-unicode.vim'
on_cmd = 'OpenBrowserUnicode'
depends = 'open-browser.vim'

[[plugins]]
repo = 'kana/vim-altr'
on_map = '<Plug>(altr-forward)'
hook_add = '''
  nmap <F2> <Plug>(altr-forward)
'''
hook_source = '''
  " https://github.com/thinca/config/blob/a109fa4a22abf9037563785a3d5fb119eb5ea2ae/dotfiles/dot.vim/vimrc#L2406
  call altr#define('%.go', '%_test.go')
'''

[[plugins]]
repo = 'thinca/vim-prettyprint'
on_cmd = 'PP'
hook_add = '''
  call extend(g:vimrc_altercmd_dic, {'pp': 'PP'})
'''

[[plugins]]
repo = 'tpope/vim-repeat'
hook_add = '''
  " Quickly make a macro and use it with '.'
  " https://github.com/AndrewRadev/Vimfiles/blob/master/startup/mappings.vim
  "   https://gist.github.com/toshi32tony3/00c441a3619d83d7d97b
  let s:simple_macro_active = 0
  nnoremap <silent> <A-m> :call <SID>SimpleMacro()<CR>
  function! s:SimpleMacro()
    let s:simple_macro_active = (s:simple_macro_active + 1) % 2
    if s:simple_macro_active
      call feedkeys('qm', 'n')
    else
      normal! q
      " remove trailing <A-m>, <C-o>
      let @m = @m[0 : -3]
      let @m = stridx(@m, "\<C-o>") == (len(@m) - 1) ? @m[0 : -2] : @m
      call repeat#set('@m', v:count1)
    endif
  endfunction
'''

[[plugins]]
repo = 'mattn/webapi-vim'

[[plugins]]
repo = 'ynkdir/vim-vimlparser'

[[plugins]]
repo = 'kana/vim-operator-user'

[[plugins]]
repo = 'vim-voom/VOoM'
on_cmd ='Voom'
hook_add = '''
  call extend(g:vimrc_altercmd_dic, {
        \   'voo[m]': 'Voom rest',
        \   'out[line]': 'Voom rest',
        \ })
'''
hook_source = '''
  " Sayonara
  let g:sayonara_filetypes = get(g:, 'sayonara_filetypes', {})
  let g:sayonara_filetypes.voomtree = 'VoomQuitAll'
'''

# }}}1  Web Service {{{1
[[plugins]]
repo = 'lambdalisue/vim-gista'
on_cmd = 'Gista'
on_map = '<Plug>'
depends = 'open-browser.vim'
hook_add = '''
  let g:gista#client#default_username = 'hokorobi'

  call extend(g:vimrc_altercmd_dic, {'gis[ta]': 'Gista'})
'''

[[plugins]]
repo = 'lambdalisue/gina.vim'
on_cmd = 'Gina'
hook_add = '''
  nnoremap <Leader>gs :<C-u>Gina status -s --group=status --opener=split<CR>

  call extend(g:vimrc_altercmd_dic, {
        \   'gin[a]': 'Gina',
        \   'git': 'Gina',
        \ })
'''
hook_source = '''
  " alias
  call gina#custom#command#alias('status', 'st')
  call gina#custom#command#option('st', '-s')

  call gina#custom#command#alias('branch', 'b')

  call gina#custom#command#alias('log', 'gl')
  call gina#custom#command#option('gl', '--graph')

  " key mapping
  call gina#custom#mapping#nmap('status', 'cc', ':<C-u>Gina commit --group=status --opener=split<CR>', {'noremap': 1, 'silent': 1})
  call gina#custom#mapping#nmap('blame', 's', ':<C-u>Gina show<CR>', {'noremap': 1, 'silent': 1})

  call gina#custom#mapping#nmap('status', 'qq', ':quit<CR>', {'noremap': 1, 'silent': 1})
  call gina#custom#mapping#nmap('log', 'qq', ':quit<CR>', {'noremap': 1, 'silent': 1})
  call gina#custom#mapping#nmap('changes', 'qq', ':quit<CR>', {'noremap': 1, 'silent': 1})
  call gina#custom#mapping#nmap('branch', 'qq', ':quit<CR>', {'noremap': 1, 'silent': 1})
  call gina#custom#mapping#nmap('blame', 'qq', ':quit<CR>', {'noremap': 1, 'silent': 1})
'''

[[plugins]]
repo = 'basyura/J6uil.vim'
on_cmd = 'J6uil'
depends = 'open-browser.vim'
hook_source = '''
  source ~/_vim/_vimrc_lingr.local

  " ImageMagick の convert でアイコン作成
  " ImageMagick-6.9.0-0-Q16-x64-static だと動いたが、
  " ImageMagick-6.9.0-0-Q16-x64-dll だと動かなかった。
  " コマンドプロンプトでは変わらず実行できるのに……
  " 環境変数を Vim で変えることもできる
  " let $PATH = "C:/path/to/ImageMagick;" . $PATH
  let g:J6uil_display_icon = 1

  let g:J6uil_empty_separator = 1
  let g:J6uil_config_dir = expand('~/_vim/.J6uil')
  let g:J6uil_no_default_keymappings = 1
  " 名前の長さに併せて発言を整列しない。人によって位置がずれるのが嫌
  let g:J6uil_align_message = 0

  " メンバー表示がされない、ウィンドウサイズがおかしい、バッファ名もずれている？
  " let g:J6uil_multi_window = 1

  autocmd vimrc FileType J6uil call s:J6uil_settings()
  function! J6uil_reply()
    let repl = substitute(getline('.'), '^\s\+', '> ', '')
    call J6uil#say#open(J6uil#buffer#current_room())
    call append(0, repl)
  endfunction
  function! s:J6uil_settings()
    nmap <silent> <buffer> <LocalLeader>s <Plug>(J6uil_open_say_buffer)
    nmap <silent> <buffer> i <Plug>(J6uil_open_say_buffer)
    nmap <silent> <buffer> o <Plug>(J6uil_action_open_links)
    nmap <silent> <buffer> <CR> <Plug>(J6uil_action_enter)
    nnoremap <silent> <buffer> r :<C-u>call J6uil_reply()<CR>
    setlocal nofoldenable
  endfunction
  autocmd vimrc FileType J6uil_say call s:J6uil_say_settings()
  function! s:J6uil_say_settings()
    inoremap <silent> <buffer> <C-CR> <ESC>:call <SID>post_message()<CR>
  endfunction

  " Sayonara
    let g:sayonara_filetypes = get(g:, 'sayonara_filetypes', {})
    let g:sayonara_filetypes.J6uil_say = 'bdelete'
'''

[[plugins]]
repo = 'yasuharu519/vim-codic'
on_cmd = 'VimCodic'
hook_add = '''
  let g:vim_codic_access_token = g:codic_token

  call extend(g:vimrc_altercmd_dic, {'cod[ic]': 'VimCodic'})
'''

[[plugins]]
repo = 'rhysd/wandbox-vim'
on_cmd = 'Wandbox'

# }}}1  Others {{{1
[[plugins]]
repo = 'fedorenchik/VimCalc3'
on_cmd = 'Calc'
hook_source = '''
  " Sayonara
  let g:sayonara_filetypes = get(g:, 'sayonara_filetypes', {})
  let g:sayonara_filetypes.vimcalc = 'bdelete'
'''

[[plugins]]
repo = 'thinca/vim-submode'
on_event = 'VimEnter'
hook_add = '''
  let g:submode_keep_leaving_key = 1
  let g:submode_timeout = 0
'''
hook_source = '''
  " move to next/previous fold
  call submode#enter_with('move-to-fold', 'n', '', 'zj', 'zj')
  call submode#enter_with('move-to-fold', 'n', '', 'zk', 'zk')
  call submode#map('move-to-fold', 'n', '', 'j', 'zj')
  call submode#map('move-to-fold', 'n', '', 'k', 'zk')

  " 時系列 undo/redo
  call submode#enter_with('undo/redo', 'n', '', 'g-', 'g-')
  call submode#enter_with('undo/redo', 'n', '', 'g+', 'g+')
  call submode#map('undo/redo', 'n', '', '-', 'g-')
  call submode#map('undo/redo', 'n', '', '+', 'g+')

  "https://raw.githubusercontent.com/ryotako/dotfiles/52b1ecb275e577dcb44db367a1f563d471c2cab0/.vimrc
  " x 連打削除を一つの undo で戻るように
  call submode#enter_with('x', 'n', '', 'x', '"_x')
  call submode#map('x', 'n', '', 'x', ":<C-u>undojoin <bar> normal! \"_x<CR>")

  " diff
  call submode#enter_with('diff', 'n', '', 'dn', ']c')
  call submode#enter_with('diff', 'n', '', 'dp', '[c')
  call submode#map('diff', 'n', '', 'n', ']c')
  call submode#map('diff', 'n', '', 'p', '[c')
  call submode#enter_with('diff', 'n', '', 'dj', ']c')
  call submode#enter_with('diff', 'n', '', 'dk', '[c')
  call submode#map('diff', 'n', '', 'j', ']c')
  call submode#map('diff', 'n', '', 'k', '[c')

  " Visual モード時のインクリメント、デクリメント
  " http://vim-jp.org/blog/2015/06/30/visual-ctrl-a-ctrl-x.html
  call submode#enter_with('vinc', 'v', '', '<Leader>a', '<c-a>gv')
  call submode#enter_with('vinc', 'v', '', '<Leader>x', '<c-x>gv')
  call submode#map('vinc', 'v', '', 'a', '<c-a>gv')
  call submode#map('vinc', 'v', '', 'x', '<c-x>gv')

  if !dein#check_install('yankround.vim')
    call submode#enter_with('yr', 'n', 'r', '<Plug>(myyr)', '<Plug>(yankround-prev)')
    call submode#map('yr', 'n', 'r', 'p', '<Plug>(yankround-prev)')
    call submode#map('yr', 'n', 'r', 'n', '<Plug>(yankround-next)')
    call submode#map('yr', 'n', 'r', 'P', '<Plug>(yankround-next)')
  endif

  if !dein#check_install('vim-expand-region')
    " expand-regionモードの設定。,eでモードに入り、eで拡張、s, Eで縮小できる
    call submode#enter_with('expand-region', 'nv', 'r', ',e', '<Plug>(expand_region_expand)')
    call submode#map('expand-region', 'nv', 'r', 'e', '<Plug>(expand_region_expand)')
    call submode#map('expand-region', 'nv', 'r', 'E', '<Plug>(expand_region_shrink)')
  endif

  if !dein#check_install('vim-easymotion')
    call submode#enter_with('emn', 'nv', 'r', '<Leader>;', '<Plug>(easymotion-next)')
    call submode#enter_with('emn', 'nv', 'r', '<Leader>,', '<Plug>(easymotion-prev)')
    call submode#map('emn', 'nv', 'r', ';', '<Plug>(easymotion-next)')
    call submode#map('emn', 'nv', 'r', ',', '<Plug>(easymotion-prev)')
  endif
'''

[[plugins]]
repo = 'hokorobi/vim-hg'
frozen = 1
on_cmd = 'Hg'
depends = 'vim-system_job'
hook_add = '''
  let $HGENCODING = 'UTF-8'
  let g:hg_path = 'M:/OLS/File/TortoiseHg/hg.exe'
  call extend(g:vimrc_altercmd_dic, {'hg': 'Hg'})
'''

[[plugins]]
repo = 'hokorobi/vim-howm-syntax-mini'
frozen = 1

[[plugins]]
repo = 'hokorobi/vim-system_job'
lazy = 1
frozen = 1

[[plugins]]
repo = 'vim-jp/vital.vim'
depends = 'vital-Whisky'
on_cmd = 'Vitalize'

[[plugins]]
repo = 'lambdalisue/vital-Whisky'
lazy = 1
# }}}
