# Plugin Manager {{{1
[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'hokorobi/vim-templug'
on_cmd = 'Templug'
hook_add = '''
  set packpath& packpath+=~/_vim
'''

# }}}1  Completion {{{1
[[plugins]]
repo = 'prabirshrestha/asyncomplete.vim'
on_ft = ['autohotkey', 'cfg', 'git', 'go', 'javascript', 'plantuml', 'python', 'rst', 'snippet', 'toml', 'vim', 'vb', 'xsl']
hook_add = '''
  " let g:asyncomplete_log_file = expand('~/_vim/.asyncomplete/asyncomplete.log')

  " デフォルトでは asyncomplete を有効にしない
  let g:asyncomplete_enable_for_all = 0
  " completeopt は自分の設定を優先する。
  let g:asyncomplete_auto_completeopt = 0

  let g:asyncomplete_min_chars = 2

  " ポップアップが表示され過ぎるのを避ける
  let g:asyncomplete_popup_delay = 200

  autocmd vimrc FileType autohotkey,cfg,git,go,javascript,plantuml,python,rst,snippet,toml,vim,vb,xsl call asyncomplete#enable_for_buffer()
'''

[[plugins]]
repo = 'hrsh7th/vim-vsnip'
on_event = ['InsertEnter']
hook_add = '''
  " Expand or jump
  BulkMap [is] <expr> <C-k> vsnip#available(1) ? '<Plug>(vsnip-expand-or-jump)' : '<C-k>'

  " Jump forward or backward
  BulkMap [is] <expr> <Tab>   vsnip#jumpable(1)  ? '<Plug>(vsnip-jump-next)' : '<Tab>'
  BulkMap [is] <expr> <S-Tab> vsnip#jumpable(-1) ? '<Plug>(vsnip-jump-prev)' : '<S-Tab>'

  let g:vsnip_snippet_dir = expand('~/vimfiles/vsnip')
'''

[[plugins]]
repo = 'hrsh7th/vim-vsnip-integ'
on_event = ['InsertEnter']
depends = ['asyncomplete.vim', 'vim-vsnip']

[[plugins]]
repo = 'mattn/asyncomplete-file.vim'
rev = 'windows'
depends = ['asyncomplete.vim']
hook_source = '''
  autocmd vimrc User asyncomplete_setup call
    \ asyncomplete#register_source(
    \   asyncomplete#sources#file#get_source_options({
    \     'name': 'file',
    \     'allowlist': ['*'],
    \     'priority': 10,
    \     'completor': function('asyncomplete#sources#file#completor')
    \   }))
'''

[[plugins]]
repo = 'hokorobi/asyncomplete-buffer.vim'
rev = 'suppress-suggest-behind-japanese'
depends = ['asyncomplete.vim']
on_ft = ['autohotkey', 'cfg', 'git', 'javascript', 'plantuml', 'rst', 'snippet', 'toml', 'vb', 'vim', 'xsl']
hook_source = '''
  let g:asyncomplete_buffer_match_pattern = '\k\+$'

  autocmd vimrc User asyncomplete_setup call
    \ asyncomplete#register_source(
    \   asyncomplete#sources#buffer#get_source_options({
    \     'name': 'buffer',
    \     'priority': 5,
    \     'allowlist': ['*'],
    \     'blocklist': ['go', 'python'],
    \     'completor': function('asyncomplete#sources#buffer#completor'),
    \   }))
'''

[[plugins]]
repo = 'prabirshrestha/asyncomplete-necosyntax.vim'
on_ft = ['autohotkey', 'javascript', 'plantuml', 'vb', 'vim']
depends = ['asyncomplete.vim', 'neco-syntax']
hook_source = '''
  autocmd vimrc User asyncomplete_setup call
      \ asyncomplete#register_source(
      \   asyncomplete#sources#necosyntax#get_source_options({
      \     'name': 'necosyntax',
      \     'priority': 7,
      \     'allowlist': ['autohotkey', 'javascript', 'plantuml', 'vb', 'vim'],
      \     'completor': function('asyncomplete#sources#necosyntax#completor'),
      \   }))
'''

[[plugins]]
repo = 'Shougo/neco-syntax'
lazy = 1

[[plugins]]
repo = 'prabirshrestha/asyncomplete-necovim.vim'
on_ft = ['vim']
depends = ['asyncomplete.vim', 'neco-vim']
hook_source = '''
  autocmd vimrc User asyncomplete_setup call
      \ asyncomplete#register_source(
      \   asyncomplete#sources#necovim#get_source_options({
      \     'name': 'necovim',
      \     'allowlist': ['vim'],
      \     'priority': 10,
      \     'completor': function('asyncomplete#sources#necovim#completor'),
      \   }))
'''

[[plugins]]
repo = 'Shougo/neco-vim'
lazy = 1

[[plugins]]
repo = 'prabirshrestha/vim-lsp'
# on_ft を使うとうまく動かなかった
hook_add = '''
  " hook_source だとうまく動かなかった

  " let g:lsp_log_verbose = 1
  " let g:lsp_log_file = expand('~/_vim/.log/vim-lsp.log')
  let g:lsp_diagnostics_float_cursor = 1
  let g:lsp_diagnostics_float_delay = 200
  let g:lsp_document_highlight_enabled = 0
  " A> 非表示
  let g:lsp_document_code_action_signs_enabled = 0

  " https://vim-jp.slack.com/archives/CQ57P4XU4/p1614523430139700
  function s:lsp_format() abort
    silent LspDocumentFormatSync
    LspCodeActionSync source.organizeImports
  endfunction
  function s:on_lsp_buffer_enabled() abort
    if &l:buftype isnot# '' || win_gettype() isnot# ''
      return
    endif

    setlocal omnifunc=lsp#complete
    setlocal signcolumn=yes

    " keymap
    nmap <buffer> <Leader>al <plug>(lsp-document-diagnostics)
    " 言語によっては LS が対応していない機能もあり、その場合は元の機能を使いたいので確実なものだけ設定。
    if &filetype is# 'go' || &filetype is# 'python'
      nmap <buffer> K <plug>(lsp-hover)
      nmap <buffer> gd <plug>(lsp-definition)
      nmap <buffer> <C-]> <plug>(lsp-definition)
      nmap <buffer> <Leader>ar <plug>(lsp-rename)
      nmap <buffer> <Leader>aR <plug>(lsp-references)
    endif

    " submode
    call submode#enter_with('lsp', 'n', 'br', '<Leader>aj', '<plug>(lsp-next-diagnostic-nowrap)')
    call submode#enter_with('lsp', 'n', 'br', '<Leader>an', '<plug>(lsp-next-diagnostic-nowrap)')
    call submode#enter_with('lsp', 'n', 'br', '<Leader>ak', '<plug>(lsp-previous-diagnostic-nowrap)')
    call submode#enter_with('lsp', 'n', 'br', '<Leader>ap', '<plug>(lsp-previous-diagnostic-nowrap)')
    call submode#map('lsp', 'n', 'brs', 'j', '<plug>(lsp-next-diagnostic-nowrap)')
    call submode#map('lsp', 'n', 'brs', 'n', '<plug>(lsp-next-diagnostic-nowrap)')
    call submode#map('lsp', 'n', 'brs', 'k', '<plug>(lsp-previous-diagnostic-nowrap)')
    call submode#map('lsp', 'n', 'brs', 'p', '<plug>(lsp-previous-diagnostic-nowrap)')

    if &filetype is# 'go'
      augroup vimrc-plugin-lsp-ft-go
        autocmd! * <buffer>
        autocmd BufWritePre <buffer> call s:lsp_format()
      augroup END
    endif
  endfunction
  autocmd vimrc User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
'''

[[plugins]]
repo = 'mattn/vim-lsp-settings'
depends = 'vim-lsp'
hook_add = '''
  let g:lsp_settings_servers_dir = expand('~/_vim/lspservers')
  let g:lsp_settings = {}
  " https://github.com/tsuyoshicho/vimrc-reading/blob/ad6df8bdac68ccbba4c0457797a1f9db56fcdca1/.vim/rc/dein.toml#L2928-L2941
  let g:lsp_settings['gopls'] = {
    \  'workspace_config': {
    \    'usePlaceholders': v:true,
    \    'analyses': {
    \      'fillstruct': v:true,
    \    },
    \  },
    \  'initialization_options': {
    \    'usePlaceholders': v:true,
    \    'analyses': {
    \      'fillstruct': v:true,
    \    },
    \  },
    \}
  let g:lsp_settings_enable_suggestions = 0
'''

[[plugins]]
repo = 'tsuyoshicho/vim-efm-langserver-settings'
depends = 'vim-lsp'

[[plugins]]
repo = 'prabirshrestha/asyncomplete-lsp.vim'
on_ft = ['python', 'go']
depends = ['asyncomplete.vim', 'vim-lsp']

[[plugins]]
repo = 'gelguy/wilder.nvim'
on_event = ['CmdlineEnter']
hook_source = '''
  call wilder#enable_cmdline_enter()

  set wildcharm=<Tab>
  cmap <expr> <Tab> wilder#in_context() ? wilder#next() : "\<Tab>"
  cmap <expr> <S-Tab> wilder#in_context() ? wilder#previous() : "\<S-Tab>"

  " Add modes to ':'
  call wilder#set_option('modes', ['/', '?', ':'])

  call wilder#set_option('renderer', wilder#wildmenu_renderer(
    \ wilder#wildmenu_lightline_theme({
    \   'left': [{
    \     'value': [
    \       wilder#condition(
    \         {-> getcmdtype() ==# ':'},
    \         ' C ',
    \         ' S ',
    \       )],
    \     'hl': 'LightlineLeft_active_0'
    \   }]})))
'''

# }}}1  REPL {{{1

# Quickrun {{{2
[[plugins]]
repo = 'thinca/vim-quickrun'
on_cmd = 'QuickRun'
on_map = '<Plug>'
depends = 'shabadou.vim'
hook_add = '''
  call extend(g:vimrc_altercmd_dic, {'quic[krun]': 'Quickrun'})
'''
hook_source = '''
  let g:quickrun_config = get(g:, 'quickrun_config', {})
  let g:quickrun_config._ = {
        \   'runner': 'job',
        \   'outputter': 'buffer',
        \   'outputter/buffer/close_on_empty': 1,
        \ }

  let g:sayonara_filetypes.quickrun = 'bwipeout!'
'''

[[plugins]]
repo = 'osyo-manga/shabadou.vim'

# }}}2

[[plugins]]
repo = 'rhysd/reply.vim'
on_cmd = ['Repl', 'ReplAuto']

# }}}1  Text Object {{{1
[[plugins]]
repo = 'kana/vim-textobj-user'

[[plugins]]
repo = 'mattn/vim-textobj-url'
depends = 'vim-textobj-user'
on_map = [['ox', 'iu'], ['ox', 'au']]

[[plugins]]
repo = 'machakann/vim-sandwich'
hook_add = '''
  let g:operator_sandwich_no_default_key_mappings = v:true

  BulkMap [nx] s <Nop>

  nmap sc  <Plug>(operator-sandwich-replace)<Plug>(operator-sandwich-release-count)<Plug>(textobj-sandwich-query-a)
  nmap scc <Plug>(operator-sandwich-replace)<Plug>(operator-sandwich-release-count)<Plug>(textobj-sandwich-auto-a)
  nmap cs  <Plug>(operator-sandwich-replace)<Plug>(operator-sandwich-release-count)<Plug>(textobj-sandwich-query-a)
  nmap css <Plug>(operator-sandwich-replace)<Plug>(operator-sandwich-release-count)<Plug>(textobj-sandwich-auto-a)
  BulkMap [xo] sc <Plug>(operator-sandwich-replace)

  nmap sr  <Plug>(operator-sandwich-replace)<Plug>(operator-sandwich-release-count)<Plug>(textobj-sandwich-query-a)
  nmap srr <Plug>(operator-sandwich-replace)<Plug>(operator-sandwich-release-count)<Plug>(textobj-sandwich-auto-a)
  " nmap rss <Plug>(operator-sandwich-replace)<Plug>(operator-sandwich-release-count)<Plug>(textobj-sandwich-auto-a)
  BulkMap [xo] sr <Plug>(operator-sandwich-replace)

  nmap sd  <Plug>(operator-sandwich-delete)<Plug>(operator-sandwich-release-count)<Plug>(textobj-sandwich-query-a)
  nmap sdd <Plug>(operator-sandwich-delete)<Plug>(operator-sandwich-release-count)<Plug>(textobj-sandwich-auto-a)
  nmap ds  <Plug>(operator-sandwich-delete)<Plug>(operator-sandwich-release-count)<Plug>(textobj-sandwich-query-a)
  nmap dss <Plug>(operator-sandwich-delete)<Plug>(operator-sandwich-release-count)<Plug>(textobj-sandwich-auto-a)
  BulkMap [xo] sd <Plug>(operator-sandwich-delete)

  nmap saa <Plug>(operator-sandwich-add)<Plug>(operator-sandwich-release-count)<Plug>(textobj-sandwich-auto-a)
  BulkMap [nxo] sa <Plug>(operator-sandwich-add)
  " https://github.com/machakann/vimrc/blob/3dc16ac1ae31197e35bebdf3f0fbf275117478bd/.vimrc#L1127-L1152
  " nmap s( <Plug>(operator-sandwich-add-query1st)(
  " nmap s8 <Plug>(operator-sandwich-add-query1st)(
  " nmap s) <Plug>(operator-sandwich-add-query1st))
  " nmap s9 <Plug>(operator-sandwich-add-query1st))
  xmap s( <Plug>(operator-sandwich-add)(
  xmap s8 <Plug>(operator-sandwich-add)(
  xmap s) <Plug>(operator-sandwich-add))
  xmap s9 <Plug>(operator-sandwich-add))
  " nmap s[ <Plug>(operator-sandwich-add-query1st)[
  " nmap s] <Plug>(operator-sandwich-add-query1st)]
  xmap s[ <Plug>(operator-sandwich-add)[
  xmap s] <Plug>(operator-sandwich-add)]
  " nmap s{ <Plug>(operator-sandwich-add-query1st){
  " nmap s} <Plug>(operator-sandwich-add-query1st)}
  xmap s{ <Plug>(operator-sandwich-add){
  xmap s} <Plug>(operator-sandwich-add)}
  " nmap s" <Plug>(operator-sandwich-add-query1st)"
  " nmap s2 <Plug>(operator-sandwich-add-query1st)"
  xmap s" <Plug>(operator-sandwich-add)"
  xmap s2 <Plug>(operator-sandwich-add)"
  " nmap s' <Plug>(operator-sandwich-add-query1st)'
  nmap s7 <Plug>(operator-sandwich-add-query1st)'
  xmap s' <Plug>(operator-sandwich-add)'
  xmap s7 <Plug>(operator-sandwich-add)'
  nmap sf <Plug>(operator-sandwich-add-query1st)<C-f>
  xmap sf <Plug>(operator-sandwich-add)<C-f>

  let g:sandwich_no_default_key_mappings = 1
  let g:textobj#sandwich#stimeoutlen = 100

  let g:sandwich#recipes = deepcopy(g:sandwich#default_recipes)
  let g:sandwich#recipes += [
        \   {'buns': ['（', '）'], 'nesting': 1, 'input': ['j(', 'j)', 'jp']},
        \   {'buns': ['「', '」'], 'nesting': 1, 'input': ['j[', 'j]', 'jb']},
        \   {'buns': ['『', '』'], 'nesting': 1, 'input': ['j{', 'j}', 'jB']},
        \   {'buns': ['【', '】'], 'nesting': 1, 'input': ['j<', 'j>', 'jk']},
        \ ]
'''

[[plugins]]
repo = 'tommcdo/vim-exchange'
on_map = [['n', 'cx'], ['x', 'X']]

[[plugins]]
repo = 'kana/vim-textobj-indent'
depends = 'vim-textobj-user'
on_map = [['ox', 'ii'], ['ox', 'ai'], ['ox', 'iI']]

[[plugins]]
repo = 'glts/vim-textobj-comment'
depends = 'vim-textobj-user'

[[plugins]]
repo = 'romgrk/equal.operator'
on_map = [['ox', 'i='], ['ox', 'a=']]
hook_source = '''
  let g:equal_operator_default_mappings = 0

  omap i=h <Plug>(operator-lhs)
  omap a=h <Plug>(operator-Lhs)
  xmap i=h <Plug>(visual-lhs)
  xmap a=h <Plug>(visual-Lhs)

  omap i=l <Plug>(operator-rhs)
  omap a=l <Plug>(operator-Rhs)
  xmap i=l <Plug>(visual-rhs)
  xmap a=l <Plug>(visual-Rhs)
'''

# }}}1  Language, Format, Filetype {{{1

# diff {{{2
[[plugins]]
repo = 'AndrewRadev/linediff.vim'
on_cmd = 'Linediff'
hook_add = '''
  call extend(g:vimrc_altercmd_dic, {'diffl[ine]': 'Linediff'})
'''
hook_source = '''
  let g:linediff_modify_statusline = 0
'''

# }}}2 Python {{{2
[[plugins]]
repo = 'hdima/python-syntax'
hook_add = '''
  let g:python_hightlight_all = 1
'''

[[plugins]]
repo = 'hynek/vim-python-pep8-indent'

# }}}2 Golang {{{2
[[plugins]]
repo = 'mattn/vim-godoc'

[[plugins]]
repo = 'mattn/vim-gorun'

[[plugins]]
repo = 'mattn/vim-goaddtags'

# }}}2 Markdown {{{2
[[plugins]]
repo = 'previm/previm'
on_cmd = 'PrevimOpen'
depends = 'open-browser.vim'

[[plugins]]
repo = 'plasticboy/vim-markdown'
hook_source = '''
  " http://mattn.kaoriya.net/software/vim/20140523124903.htm
  let g:markdown_fenced_languages = [
        \   'css',
        \   'erb=eruby',
        \   'javascript',
        \   'js=javascript',
        \   'json=javascript',
        \   'ruby',
        \   'sass',
        \   'xml',
        \ ]
'''

# }}}2 rst {{{2
[[plugins]]
repo = 'hokorobi/vim-restructuredtext'
on_ft = 'rst'
rev = 'dev'
hook_add = '''
  let g:rst_fold_enabled = 1

  " load after/ftplugin/rst.vim
'''
[plugins.ftplugin]
rst = '''
  nmap <buffer> <Leader><Leader>1 <Plug>(rst-section1)
  nmap <buffer> <Leader><Leader>2 <Plug>(rst-section2)
  nmap <buffer> <Leader><Leader>3 <Plug>(rst-section3)
  nmap <buffer> <Leader><Leader>4 <Plug>(rst-section4)
  nmap <buffer> <Leader><Leader>5 <Plug>(rst-section5)
  nmap <buffer> <Leader><Leader>6 <Plug>(rst-section6)

  imap <buffer> <C-CR> <Plug>(rst-insert-samebullet)
  imap <buffer> <S-CR> <Plug>(rst-insert-childbullet)
  imap <buffer> <C-S-CR> <Plug>(rst-insert-parentbullet)

  imap <buffer> <M-CR> <Plug>(rst-insert-lineblock)
'''

# }}}2 quickfix {{{2
[[plugins]]
repo = 'lambdalisue/qfloc.vim'
on_ft = 'qf'
hook_add = '''
  " TODO: LSP を使わない filetype では有効にする
  let g:qfloc_disable_sign = v:true
  let g:qfloc_disable_default_mappings = v:true
  let g:qfloc_disable_hover = v:true

  nmap Q <Plug>(qfloc-cswitch)
  nmap L <Plug>(qfloc-lswitch)
  " nmap <expr> ]c &diff ? ']c' : '<Plug>(qfloc-cnext)'
  " nmap <expr> [c &diff ? '[c' : '<Plug>(qfloc-cprevious)'
  " nmap ]l <Plug>(qfloc-lnext)
  " nmap [l <Plug>(qfloc-lprevious)
'''
[plugins.ftplugin]
qf = '''
  " qf.vim
  " nmap <buffer> j <Plug>(qfloc-j)
  " nmap <buffer> k <Plug>(qfloc-k)
  " nmap <buffer> s <Plug>(qfloc-sbuffer)
  " nmap <buffer> p <Plug>(qfloc-preview)
  nmap <buffer> u <Plug>(qfloc-undo)
  nmap <buffer> dd <Plug>(qfloc-delete)
  xmap <buffer> d  <Plug>(qfloc-delete)
'''

[[plugins]]
repo = 'thinca/vim-qfreplace'
on_cmd = 'Qfreplace'

# preview Quickfix at popup
[[plugins]]
repo = 'AndrewRadev/quickpeek.vim'
on_ft = 'qf'
[plugins.ftplugin]
qf = '''
  nnoremap <buffer> p <Cmd>QuickpeekToggle<CR>
'''

[[plugins]]
repo = 'mattn/vim-qfnavigate'
on_map = '<Plug>'
hook_add = '''
  nmap <silent> <F10> <plug>(qfnavigate-next)
  nmap <silent> <S-F10> <plug>(qfnavigate-previous)
  nmap <silent> <F11> <plug>(qfnavigate-previous)
'''

# }}}2 Vim {{{2
[[plugins]]
repo = 'vim-jp/syntax-vim-ex'

# Vim script の最後に発生したエラーの箇所を開く
[[plugins]]
repo = 'rbtnn/vim-vimscript_lasterror'
on_cmd = 'VimscriptLastError'

[[plugins]]
repo = 'rbtnn/vim-vimscript_tagfunc'
on_ft = 'vim'

# }}}2 Others {{{2
[[plugins]]
repo = 'pangloss/vim-javascript'

[[plugins]]
repo = 'tsuyoshicho/plantuml-previewer.vim'
rev = '1b2f9c6'
depends = 'open-browser.vim'
on_cmd = 'PlantumlOpen'
hook_source = '''
  let g:plantuml_previewer#plantuml_jar_path = g:plantuml_path
'''

[[plugins]]
repo = 'hokorobi/plantuml-syntax'
rev = 'dev'
merged = 0

[[plugins]]
repo = 'cespare/vim-toml'

[[plugins]]
repo = 'osyo-manga/vim-precious'
depends = 'context_filetype.vim'
on_ft = ['toml']
hook_source = '''
  " FIXME: 起動後最初に toml を開いた際にカーソルが Vim script の位置にあると ft が vim になり、
  "        Insert mode で toml になる？　Normal mode に戻ってカーソルを移動するとすべてが範囲外相当
  "        の色になる。開き直すと正常になる。

  let g:precious_enable_switchers = {
  \   '*':        {'setfiletype' : 0},
  \   'toml':     {'setfiletype' : 1},
  \ }

  " カーソル移動時の自動切り替えを無効化
  let g:precious_enable_switch_CursorMoved   = {"*" : 0}
  let g:precious_enable_switch_CursorMoved_i = {"*" : 0}
  let g:precious_enable_switch_CursorHold    = {"*" : 0}

  " insert に入った時にスイッチし、抜けた時に元に戻す
  autocmd vimrc InsertEnter * :PreciousSwitch
  autocmd vimrc InsertLeave * :PreciousReset
'''

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'hnamikaw/vim-autohotkey'

[[plugins]]
repo = 'mechatroner/rainbow_csv'
on_cmd = 'RainbowDelim'

# [[plugins]]
# repo = 'mattn/emmet-vim'
# on_ft = 'html'

[[plugins]]
repo = 'hokorobi/vim-howm-syntax-mini'

[[plugins]]
repo = 'alvan/vim-closetag'
on_ft = ['html', 'xml']

#}}}2

# }}}1  Look {{{1
[[plugins]]
repo = 'rhysd/vim-color-spring-night'
hook_add = '''
  let g:spring_night_kill_italic = 1
  let g:spring_night_kill_bold = 1
'''

# インクリメンタルサーチの件数をポップアップ表示
[[plugins]]
repo = 'obcat/vim-hitspop'
on_event = 'CmdlineEnter'
hook_source = '''
  let g:hitspop_line = 'winbot'
  let g:hitspop_column = 'winleft'
  highlight link hitspopErrorMsg ErrorMsg
  highlight link hitspopNormal ErrorMsg
'''

# hitspop の表示を消す
[[plugins]]
repo = 'haya14busa/is.vim'
on_event = 'CmdlineEnter'
on_map = '<Plug>'
hook_add = '''
  let g:is#do_default_mappings = v:false
  BulkMap [nxo] n <Plug>(is-n)
  BulkMap [nxo] N <Plug>(is-N)
'''

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
  let g:unite_force_overwrite_statusline = 0
  let g:vimfiler_force_overwrite_statusline = 0
  let g:vimshell_force_overwrite_statusline = 0

  let g:lightline = {
        \   'colorscheme': 'default',
        \   'active': {
        \     'left': [['mode', 'paste'], ['readonly', 'filename', 'modified', 'pwd']],
        \     'right': [['lineinfo'], ['fileformat', 'fenc', 'filetype']]
        \   },
        \   'mode_map': {
        \     'n' : 'N',
        \     'i' : 'I',
        \     'R' : 'R',
        \     'v' : 'V',
        \     'V' : 'VL',
        \     "\<C-v>": 'VB',
        \     'c' : 'C',
        \     's' : 'S',
        \     'S' : 'SL',
        \     "\<C-s>": 'SB',
        \     't': 'T',
        \   },
        \   'component': {
        \     'lineinfo': ':%-2v',
        \   },
        \   'component_function': {
        \     'swap': 'Swap',
        \     'pwd': 'getcwd',
        \     'fenc': 'LightlineFenc',
        \     'filename': 'LightlineFilename',
        \     'fileformat': 'LightlineFileformat',
        \     'filetype': 'LightlineFiletype',
        \   },
        \   'component_type': {
        \     'buffers': 'tabsel',
        \   },
        \ }

  " https://github.com/thinca/config/blob/a8e3ee41236fcdbfcfa77c954014bc977bc6d1c6/dotfiles/dot.vim/vimrc#L378
  function! Swap()
    return get(b:, 'swapfile_exists', 0) ? 'swp' : ''
  endfunction

  function! LightlineFilename() abort
    " quickfixリストを生成したコマンド or ディレクトリ名付き filename
    return &buftype ==# 'quickfix' ? get(w:, 'quickfix_title', '') : fnamemodify(bufname('%'), ':.')
  endfunction

  " BOM も表示する fenc
  function! LightlineFenc() abort
    if winwidth(0) < 70
      return ''
    endif

    let fenc = &fileencoding == '' ? &encoding : &fileencoding
    return fenc !=# 'utf-8' ? fenc : &bomb ? fenc .. ' (BOM)' : fenc
  endfunction

  function! LightlineFiletype() abort
    return winwidth(0) < 70 ? '' : &filetype ==# '' ? 'no ft' : &filetype
  endfunction

  function! LightlineFileformat() abort
    return winwidth(0) < 70 ? '' : &fileformat
  endfunction
'''

[[plugins]]
repo = 'itchyny/vim-cursorword'

# replace matchparen
[[plugins]]
repo = 'andymass/vim-matchup'
hook_add = '''
  " sandwich の ib ab を使うため ds% cs% は無効にする
  let g:matchup_surround_enabled = 0

  " popup で表示
  let g:matchup_matchparen_offscreen = {'method': 'popup'}

  " 関数内部の return などに移動せず関数先頭と末尾を行き来する。
  let g:matchup_delim_nomids = 1

  BulkMap [nxo] <Leader><Space> <Plug>(matchup-%)
'''

[[plugins]]
repo = 't9md/vim-quickhl'
on_map = '<Plug>'
hook_add = '''
  BulkMap [nx] <Leader>m <Plug>(quickhl-manual-this)
  BulkMap [nx] <Leader>M <Plug>(quickhl-manual-reset)
'''

# :substitute などで変更対象のハイライト、変更後のプレビュー
[[plugins]]
repo = 'markonm/traces.vim'
hook_add = '''
  let g:traces_num_range_preview = 1
  let g:traces_preview_window = 'botright 10new'
'''

[[plugins]]
repo = 'liuchengxu/vista.vim'
on_cmd = 'Vista'
hook_source = '''
  let g:sayonara_filetypes.vista = 'Vista!'
'''

[[plugins]]
repo = 'lambdalisue/readablefold.vim'

# #rrggbb や #rgb の色を視覚化
[[plugins]]
repo = 'lilydjwg/colorizer'
on_cmd = 'ColorHighlight'

[[plugins]]
repo = 'machakann/vim-highlightedyank'
hook_add = '''
  let g:highlightedyank_highlight_duration = 300
  highlight HighlightedyankRegion cterm=reverse gui=reverse
'''

# }}}1  Input & Edit {{{1
[[plugins]]
repo = 'cohama/lexima.vim'
on_event = ['InsertEnter', 'CmdlineEnter']
hook_source = '''
  let g:lexima_ctrlh_as_backspace = 1

  source ~/vimfiles/rc/lexima.vim
  " 改行時に \ を入力するため
  autocmd vimrc FileType vim nmap <buffer> o A<CR>
'''

[[plugins]]
repo = 'uplus/vim-clurin'
on_map = '<Plug>'
hook_add = '''
  nmap + <Plug>(clurin-next)
  nmap - <Plug>(clurin-prev)
'''
# 設定に ''' が入っているので """ """ でくくらないと駄目。
hook_source = """
  function! g:Speeddating(cnt) abort
    if a:cnt < 0
      call speeddating#increment(-v:count1)
    else
      call speeddating#increment(v:count1)
    endif
  endfunction

  let g:clurin = {
        \   '-': {
        \     'use_default': 0,
        \     'def': [
        \       ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'],
        \       ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday'],
        \       ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'],
        \       ['月', '火', '水', '木', '金', '土', '日'],
        \       ['true', 'false'],
        \       ['True', 'False'],
        \       ['on', 'off'],
        \       ['enable', 'disable'],
        \       ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
        \       ['yes', 'no'],
        \       ['left', 'right'],
        \       ['=', ' = '],
        \       ['+', ' + '],
        \       ['-', ' - '],
        \       ['*', ' * '],
        \       ['/', ' / '],
        \       ['pick', 'reword', 'edit', 'squash', 'fixup'],],
        \     'nomatch': function('g:Speeddating')},
        \   'toml vim': {
        \     'def': [[
        \       {'pattern': '"\([^"]*\)"'  , 'replace': '"\1"'},
        \       {'pattern': '''\([^'']*\)''', 'replace': '''\1'''}]]},
        \}
"""

[[plugins]]
repo = 'tpope/vim-speeddating'
on_func = 'speeddating#'
hook_add = '''
  let g:speeddating_no_mappings = v:true
'''

[[plugins]]
repo = 'junegunn/vim-easy-align'
on_cmd = 'EasyAlign'
on_map = '<Plug>(EasyAlign'
depends = ['vim-repeat', 'visualrepeat']
hook_add = '''
  vmap <Enter> <Plug>(EasyAlign)
'''

[[plugins]]
repo = 'mbbill/undotree'
on_cmd = 'UndotreeToggle'
hook_add = '''
  nnoremap [toggle]u <Cmd>UndotreeToggle<CR>
  call extend(g:vimrc_altercmd_dic, {
        \   'undot[reetoggle]': 'UndotreeToggle',
        \ })
'''
hook_source = '''
  let g:undotree_WindowLayout = 2
  let g:undotree_SetFocusWhenToggle = 1
  let g:undotree_ShortIndicators = 1
'''

[[plugins]]
repo = 'osyo-manga/vim-jplus'
on_map = '<Plug>'
hook_add = '''
  " 空白を削除して行を結合
  " 空白ありで連結のほうが使うことが多い。
  "BulkMap [nx] J <Plug>(jplus-input)<CR>

  " 空白を削除した上で任意の文字を挿入して行を結合
  BulkMap [nx] <Leader>J <Plug>(jplus-input)
'''

[[plugins]]
repo = 'hokorobi/yankround.vim'
on_map = [['n', '<Leader>f'], ['nx', '<Plug>']]
on_cmd = 'CtrlPYankRound'
hook_add = '''
  BulkMap [nx] <expr> P yankround#is_active() ? '<Plug>(myyr)' : '<Plug>(yankround-P)'
  BulkMap [nx] <expr> p yankround#is_active() ? '<Plug>(myyr)' : '<Plug>(yankround-p)'
  nnoremap <leader>fp <Cmd>CtrlPYankRound<CR>

  let g:yankround_dir = expand('~/_vim/.yankround')
  let g:yankround_use_region_hl = 1

  " submode
  call submode#enter_with('yr', 'n', 'r', '<Plug>(myyr)', '<Plug>(yankround-prev)')
  call submode#map('yr', 'n', 'rs', 'p', '<Plug>(yankround-prev)')
  call submode#map('yr', 'n', 'rs', 'n', '<Plug>(yankround-next)')
  call submode#map('yr', 'n', 'rs', 'P', '<Plug>(yankround-next)')
'''

# g<C-a> などは同行での連番はできないようなので、まだ有用
[[plugins]]
repo = 'deris/vim-rengbang'
on_cmd = ['RengBang', 'RengBangUsePrev', 'RengBangConfirm']
hook_source = '''
  let g:rengbang_default_start = 1
'''

[[plugins]]
repo = 'ntpeters/vim-better-whitespace'
on_cmd = ['StripWhitespace', 'ToggleStripWhitespaceOnSave']
hook_add = '''
  command! WhitespaceStrip :StripWhitespace
'''

[[plugins]]
repo = 'mattn/vim-sonictemplate'
on_cmd = 'Template'
on_map = [['ni', '<C-y>']]
hook_add = '''
  let g:sonictemplate_vim_template_dir = [
    \   '$HOME/vimfiles/sonictemplate',
    \   '$HOME/_vim/dein/repos/github.com/mattn/vim-sonictemplate/template',
    \]

  if exists('g:howm_dir') && isdirectory(g:howm_dir)
    nnoremap <Leader>,c <Cmd>call vimrc#EditHowmNew(g:howm_dir)<CR>
  endif

  autocmd vimrc FileType toml imap <buffer> <C-t> .plugin<C-R>=sonictemplate#postfix()<CR>
'''

[[plugins]]
repo = 'deris/vim-pasta'
on_map = [['nx', '<Space>p'], ['nx', '<Space>P']]
hook_source = '''
  let g:pasta_paste_before_mapping = '<Space>P'
  let g:pasta_paste_after_mapping = '<Space>p'
'''

[[plugins]]
repo = 'nocd5/ExpandSerialNumber.vim'
on_cmd = 'ExpandSerialNumber'

[[plugins]]
repo = 'lambdalisue/vim-findent'
on_cmd = ['Findent', 'FindentRestore']
hook_add = '''
  let g:findent#enable_messages = 0
  autocmd vimrc FileType autohotkey,javascript,json,neosnippet,plantuml,python,ruby,vim Findent
  autocmd vimrc FileType toml setlocal expandtab shiftwidth=2 tabstop=4 softtabstop=2
'''

[[plugins]]
repo = 'machakann/vim-textobj-delimited'
# hook_post_source = '''
#   let g:textobj_delimited_patterns = deepcopy(g:textobj#delimited#default_patterns)
#   " , 区切りのパターン
#   " vim-swap へ移行
#   let g:textobj_delimited_patterns += [[', *', '\m\%(, *\)\?\%([^,[\]{}]\+, *\)\+\%([^,[\]{}]\+\)\?']]
# '''

[[plugins]]
repo = 'machakann/vim-swap'
hook_add = '''
  omap i, <Plug>(swap-textobject-i)
  xmap i, <Plug>(swap-textobject-i)
  omap a, <Plug>(swap-textobject-a)
  xmap a, <Plug>(swap-textobject-a)

  " タブ区切りも要素とする。
  let g:swap#rules = deepcopy(g:swap#default_rules)
  let g:swap#rules += [{
        \   "delimiter": ['\t'],
        \   "body": '.\+',
        \ }]

  " 行内の要素をソートする
  command! SortLine execute 'normal gss<ESC>'
'''

# 選択した行すべてに対して I, A を反映させる。
[[plugins]]
repo = 'kana/vim-niceblock'
on_map = [['x', 'I'], ['x', 'gI'], ['x', 'A']]

[[plugins]]
repo = 'tyru/caw.vim'
on_map = '<Plug>(caw:prefix)'
hook_add = '''
  BulkMap [nx] gc <Plug>(caw:prefix)
  " 現在行をコピーしてコメントアウト
  nmap gcy yypgcIk
  " 選択範囲をコピーしてコメントアウト
  xmap gcy ygvgcIp
'''

[[plugins]]
repo = 'matze/vim-move'
on_map = '<Plug>Move'
hook_add = '''
  let g:move_map_keys = 0
  nmap <C-Up> <Plug>MoveLineUp
  xmap <C-Up> <Plug>MoveBlockUp
  nmap <C-Down> <Plug>MoveLineDown
  xmap <C-Down> <Plug>MoveBlockDown
  nmap <A-l> <Plug>MoveCharRight
  xmap <A-l> <Plug>MoveBlockRight
  nmap <A-h> <Plug>MoveCharLeft
  xmap <A-h> <Plug>MoveBlockLeft
'''

[[plugins]]
repo = 'tpope/vim-repeat'
hook_add = '''
  " Quickly make a macro and use it with '.'
  " https://github.com/AndrewRadev/Vimfiles/blob/master/startup/mappings.vim
  "   https://gist.github.com/toshi32tony3/00c441a3619d83d7d97b
  let s:simple_macro_active = 0
  nnoremap <silent> <A-m> <Cmd>call <SID>SimpleMacro()<CR>
  function! s:SimpleMacro()
    let s:simple_macro_active = (s:simple_macro_active + 1) % 2
    if s:simple_macro_active
      call feedkeys('qm', 'n')
    else
      normal! q
      " remove trailing <A-m>, <C-o>
      let @m = @m[0 : -3]
      let @m = stridx(@m, "\<C-o>") == (len(@m) - 1) ? @m[0 : -2] : @m
      call repeat#set('@m', v:count1)
    endif
  endfunction
'''

[[plugins]]
repo = 'sentriz/vim-print-debug'
on_func = 'print_debug#print_debug'
hook_source = '''
  let g:print_debug_templates = {
    \   'go':         'fmt.Printf("+++ {}\n")',
    \   'python':     'print(f"+++ {}")',
    \   'javascript': 'console.log(`+++ {}`);',
    \   'c':          'printf("+++ {}\n");',
    \   'vim':        'echom "+++"',
    \ }
'''

[[plugins]]
repo = 'itchyny/vim-highlighturl'
on_event = 'BufRead'

# }}}1  Motion {{{1
[[plugins]]
repo = 'easymotion/vim-easymotion'
depends = 'vim-repeat'
on_map = [['nxo', '<Plug>']]
hook_add = '''
  "map g/ <Plug>(easymotion-sn)

  " bd: bidirection
  " ?l: current line
  BulkMap [nxo] ss <Plug>(easymotion-overwin-f2)
  BulkMap [nxo] f <Plug>(easymotion-bd-fl)
  BulkMap [nxo] F <Plug>(easymotion-Fl)
  BulkMap [nxo] t <Plug>(easymotion-bd-tl)
  BulkMap [nxo] T <Plug>(easymotion-Tl)

  let g:EasyMotion_move_highlight = 0

  highlight link EasyMotionTarget DiffDelete
'''
hook_source = '''
  let g:EasyMotion_do_mapping = 0
  let g:EasyMotion_keys = 'hlasdgyuiopqwertnmzxcvbfkj;'
  let g:EasyMotion_smartcase = 1
  " PCを新しくしたらマシな速さになったみたい
  let g:EasyMotion_use_migemo = 1
  let g:EasyMotion_space_jump_first = 1
  let g:EasyMotion_use_smartsign_us = 1
  let g:EasyMotion_do_shade = 0

  " submode
  call submode#enter_with('emn', 'nx', 'r', ':', '<Plug>(easymotion-next)')
  call submode#enter_with('emn', 'nx', 'r', '<Leader>;', '<Plug>(easymotion-next)')
  call submode#enter_with('emn', 'nx', 'r', ',', '<Plug>(easymotion-prev)')
  call submode#map('emn', 'nx', 'rs', ';', '<Plug>(easymotion-next)')
  call submode#map('emn', 'nx', 'rs', ':', '<Plug>(easymotion-next)')
  call submode#map('emn', 'nx', 'rs', ',', '<Plug>(easymotion-prev)')
'''

[[plugins]]
repo = 'haya14busa/vim-edgemotion'
on_map = '<Plug>'
hook_add = '''
  BulkMap [nx] <Leader>j <Plug>(edgemotion-j)
  BulkMap [nx] <Leader>k <Plug>(edgemotion-k)
'''

[[plugins]]
repo = 'haya14busa/vim-asterisk'
on_map = '<Plug>'
hook_add = '''
  map * <Plug>(asterisk-gz*)
  map g* <Plug>(asterisk-z*)
  map z* <Plug>(asterisk-*)
  map gz* <Plug>(asterisk-g*)

  " replace
  map # <Plug>(asterisk-gz*)cgn
  map g# <Plug>(asterisk-z*)cgn
'''

# カーソル移動位置を遡る
[[plugins]]
repo = 'osyo-manga/vim-milfeulle'
hook_add = '''
  " バッファ単位で移動位置を保存
  let g:milfeulle_default_kind = 'buffer'
  " 位置の保存は CursorMoved
  let g:milfeulle_enable_CursorHold = 0
  let g:milfeulle_enable_InsertLeave = 0
  autocmd vimrc CursorMoved * MilfeulleOverlay

  nmap <C-Left> <Plug>(milfeulle-prev)
  nmap <C-Right> <Plug>(milfeulle-next)
'''

[[plugins]]
repo = 'hokorobi/vim-smarthome'
on_map = [['nxi', '<Plug>']]
hook_add = '''
  BulkMap [nxi] <silent> <Home> <Plug>(smarthome-home)
  BulkMap [nxi] <silent> <C-a> <Plug>(smarthome-home)
  BulkMap [nxi] <silent> <M-h> <Plug>(smarthome-home)
  BulkMap [nx] <silent> <Leader>h <Plug>(smarthome-home)
  BulkMap [nx] <silent> 0 <Plug>(smarthome-home)

  BulkMap [nxi] <silent> <End> <Plug>(smarthome-end)
  BulkMap [nxi] <silent> <C-e> <Plug>(smarthome-end)
  BulkMap [nxi] <silent> <M-l> <Plug>(smarthome-end)
  BulkMap [nx] <silent> <Leader>l <Plug>(smarthome-end)
  BulkMap [nx] <silent> $ <Plug>(smarthome-end)
'''

[[plugins]]
repo = 'osyo-manga/vim-operator-stay-cursor'
depends = 'vim-operator-user'
hook_add = '''
  map <expr> y operator#stay_cursor#wrapper("y")
'''

# 遅延読み込みだと前回起動時のマークが復元されない様子
[[plugins]]
repo = 'hokorobi/vim-bookmarks'
#rev = 'hokorobi'
hook_add = '''
  " bookmark_auto_save_file が無効になるので g:bookmark_manage_per_buffer は 1 にしない
  let g:bookmark_auto_save_file = expand('~/_vim/.vim-bookmarks')

  let g:bookmark_sign = '>>'
  let g:bookmark_annotation_sign = '##'

  " ブックマークを開いたら候補のウィンドウは閉じる
  let g:bookmark_auto_close = 1

  let g:bookmark_no_default_key_mappings = 1
  nmap mm <Plug>BookmarkToggle
  nmap mi <Plug>BookmarkAnnotate
  nmap ma <Plug>BookmarkShowAll
  nmap <Leader>fm <Plug>BookmarkShowAll
  nmap mj <Plug>BookmarkNext
  nmap mn <Plug>BookmarkNext
  nmap mk <Plug>BookmarkPrev
  nmap mp <Plug>BookmarkPrev
  nmap mc <Plug>BookmarkClear
  nmap mx <Plug>BookmarkClearAll
'''

# }}}1  Buffer {{{1
[[plugins]]
repo = 'mhinz/vim-sayonara'
on_cmd = 'Sayonara'
hook_add = '''
  noremap <silent><expr> qq &diff ? '<Cmd>diffoff<CR>' : '<Cmd>Sayonara!<CR>'
'''
hook_source = '''
  let g:sayonara_filetypes.qf = 'bdelete'
  let g:sayonara_filetypes.help = 'bdelete!'
'''

[[plugins]]
repo = 'tyru/closesubwin.vim'
on_func = 'closesubwin#'
hook_add ='''
  nnoremap <Leader>q <Cmd>call closesubwin#close_sub_window()<CR>
'''

[[plugins]]
repo = 'kana/vim-altr'
on_map = '<Plug>(altr-forward)'
hook_add = '''
  nmap <F2> <Plug>(altr-forward)
'''
hook_source = '''
  " https://github.com/thinca/config/blob/a109fa4a22abf9037563785a3d5fb119eb5ea2ae/dotfiles/dot.vim/vimrc#L2406
  call altr#define('%.go', '%_test.go')
'''

# }}}1  File {{{1
[[plugins]]
repo = 'kana/vim-gf-user'
on_map = ['n', 'gf']
hook_source = '''
  " Windows でも行数指定の記述を gf で開けるようにする
  " http://thinca.hatenablog.com/entry/20140324/1395590910
  call gf#user#extend('vimrc#GfFile', 1000)
'''

# diff でも gf を可能にする
[[plugins]]
repo = 'kana/vim-gf-diff'
on_ft = 'diff'
depends = 'vim-gf-user'

[[plugins]]
# FIXME: 起動後の初回実行時に実体の内容が2回繰り返して表示される
# sample: :e https://raw.githubusercontent.com/Mathiasb17/mathias/f3ad028eafcc56ddd4d72019cb6a1818e456d099/.config/nvim/init.vim
repo = 'lambdalisue/vim-protocol'
on_path = '^https\?://'

[[plugins]]
repo = 'mattn/vim-findroot'
on_event = 'BufRead'
hook_source = '''
  let g:findroot_not_for_subdir = 0
'''

# }}}1  Terminal {{{1
# terminal 上で、未入力時に ESC, : が効くようにする
[[plugins]]
repo = 'tyru/empty-prompt.vim'
on_event = ['TerminalOpen']
hook_source = '''
  " let g:empty_prompt#pattern = get(g:, 'empty_prompt#pattern', &shell =~# 'sh$' ? '\$ $' : '\S>\s*$')
  " Use nyagos
  " let g:empty_prompt#pattern = '\$ $'

  " Enter command-line / normal-mode if current line is empty prompt
  function! s:empty_prompt_mappings() abort
    call empty_prompt#map(#{lhs: ';', rhs: "<C-w>:"})
    call empty_prompt#map(#{lhs: '<Esc>', rhs: "<C-w>N"})
  endfunction
  autocmd vimrc TerminalOpen * ++once call s:empty_prompt_mappings()
'''

[[plugins]]
repo = 'voldikss/vim-floaterm'
on_cmd = 'FloatermNew'
on_func = 'floaterm#'
hook_add = '''
  nnoremap <expr> <M-t> floaterm#buflist#first() == -1 ? '<Cmd>FloatermNew<CR>' : '<Cmd>FloatermToggle<CR>'
'''
hook_source = '''
  " exit してもウィンドウが残ると閉じないといけないので
  let g:floaterm_autoclose = 1

  autocmd vimrc User FloatermOpen tnoremap <buffer> <silent> <M-t> <C-\><C-n>:FloatermToggle<CR>
  autocmd vimrc User FloatermOpen tnoremap <buffer> <silent> <C-t> <C-\><C-n>:FloatermNew<CR>
  autocmd vimrc User FloatermOpen tnoremap <buffer> <silent> <C-k> <C-\><C-n>:FloatermPrev<CR>
  autocmd vimrc User FloatermOpen tnoremap <buffer> <silent> <C-j> <C-\><C-n>:FloatermNext<CR>

  autocmd vimrc QuitPre * FloatermKill!
'''

# }}}1  CtrlP {{{1
[[plugins]]
repo = 'ctrlpvim/ctrlp.vim'
hook_add = '''
  let g:ctrlp_map = '<Nop>'

  " 候補の残りにあわせてリサイズしない
  let g:ctrlp_match_window = 'bottom,order:btt,min:2,max:20'

  " Guess vcs root dir
  let g:ctrlp_working_path_mode = 'ra'

  " Open new file in current window
  let g:ctrlp_open_new_file = 'r'

  " cache files directory
  let g:ctrlp_cache_dir = expand('~/_vim/.ctrlp')

  let g:ctrlp_switch_buffer = 0

  let g:ctrlp_regexp = 0

  " exculde mru
  let g:ctrlp_mruf_exclude = '^C:\\Users\\.*\\AppData\\Local\\Temp\\.*'

  let g:ctrlp_custom_ignore = {
    \ 'dir':  '\v[\/](\.(bzr|git|hg|svn)|node_modules|_venv)$',
    \ 'file': '\v\.(dll|exe|so)$',
    \ }

  " mapping
  let g:ctrlp_prompt_mappings = {
        \ 'AcceptSelection("e")': ['<cr>', '<2-LeftMouse>', '<m-m>'],
        \ 'PrtSelectMove("j")'  : ['<c-j>', '<down>', '<m-j>'],
        \ 'PrtSelectMove("k")'  : ['<c-k>', '<up>', '<m-k>'],
        \ 'PrtBS()'             : ['<bs>', '<c-]>', '<c-h>'],
        \ 'PrtCurLeft()'        : ['<c-b>', '<left>', '<c-^>'],
        \ 'ToggleType(-1)'      : ['<c-down>'],
        \ 'PrtCurRight()'       : ['<c-f>', '<c-l>', '<right>'],
        \ 'ToggleType(1)'       : ['<c-up>'],
        \ 'PrtInsert("c")'      : ['<c-v>', '<MiddleMouse>', '<insert>'],
        \ 'PrtDelete()'         : ['<c-d>', '<del>'],
        \ 'PrtDeleteWord()'     : ['<c-q>'],
        \ 'ToggleByFname()'     : ['<F8>'],
        \ 'AcceptSelection("v")': ['<RightMouse>'],
        \ 'PrtDeleteEnt()'      : ['<F7>', '<c-w>'],
        \ }

  nnoremap <Leader>b <Cmd>CtrlPBuffer<CR>
  nnoremap <Leader>f/ <Cmd>CtrlPLine %<CR>
  nnoremap <Leader>fo <Cmd>call vimrc#CtrlPDefaultInput('CtrlPLine %', '{{{ ')<CR>
  nnoremap <Leader>u <Cmd>CtrlPMRUFiles<CR>
  nnoremap <Leader>ff <Cmd>CtrlP<CR>
  nnoremap <Leader>fq <Cmd>CtrlPQuickfix<CR>
  nnoremap <Leader>fr <Cmd>call vimrc#CtrlPRepository('n')<CR>
  xnoremap <Leader>fr <Cmd>call vimrc#CtrlPRepository('x')<CR>
'''
[plugins.ftplugin]
rst = '''
  nnoremap <Leader>fo <Cmd>call vimrc#CtrlPDefaultInput('CtrlPLine %', 'list-table ')<CR>
'''

[[plugins]]
repo = 'hokorobi/ctrlp-sessions'
on_cmd = ['CtrlPSession', 'MkS']
hook_add = '''
  nnoremap <Leader>fs <Cmd>CtrlPSessions<CR>
  call extend(g:vimrc_altercmd_dic, {'ss': 'MkS'})

  let g:ctrlp_session_dir = expand('~/_vim/sessions')
'''

[[plugins]]
repo = 'mattn/ctrlp-launcher'
on_cmd = 'CtrlPLauncher'
hook_add = '''
  let g:ctrlp_launcher_file = expand('~/vimfiles/.ctrlp-launcher')
  nnoremap <Leader>fl <Cmd>CtrlPLauncher<CR>
'''

[[plugins]]
repo = 'zeero/vim-ctrlp-help'
on_cmd = 'CtrlPHelp'
hook_add = '''
  nnoremap <Leader>fh <Cmd>CtrlPHelp<CR>

  call extend(g:vimrc_altercmd_dic, {'hh': 'CtrlPHelp'})
'''

[[plugins]]
repo = 'tacahiroy/ctrlp-funky'
on_cmd = 'CtrlPFunky'
hook_add = '''
  nnoremap <Leader>fu <Cmd>CtrlPFunky<CR>
'''

[[plugins]]
repo = 'printesoi/ctrlp-filetype.vim'
on_cmd = 'CtrlPFiletype'
hook_add = '''
  nnoremap <Leader>ft <Cmd>CtrlPFiletype<CR>
'''

[[plugins]]
repo = 'christoomey/ctrlp-generic'
depends = 'vim-systemjob'
on_func = 'CtrlPGeneric'
hook_add = '''
  function! PasteCallback(selected_value) abort
    call setreg('z', a:selected_value)
    normal! "zp
  endfunction
  command! -nargs=* CtrlPCmdPaste call CtrlPGeneric(system_job#systemlist(<f-args>), 'PasteCallback')
'''

[[plugins]]
repo = 'hokorobi/vim-systemjob'

[[plugins]]
repo = 'suy/vim-ctrlp-commandline'
hook_add = '''
  nnoremap <silent> <Leader>f; <Cmd>call ctrlp#init(ctrlp#commandline#id())<CR>
'''

[[plugins]]
repo = 'mattn/ctrlp-matchfuzzy'
hook_add = '''
  let g:ctrlp_match_func = {'match': 'ctrlp_matchfuzzy#matcher'}
'''

# }}}1  Git {{{1
[[plugins]]
repo = 'lambdalisue/gina.vim'
on_cmd = 'Gina'
hook_add = '''
  " 開いているファイル、選択行を Github で開く
  BulkMap <noremap> [nx] <Leader>oG <Cmd>Gina browse :<CR>

  nnoremap <silent> <Leader>gL <Cmd>Gina log --graph -100 --opener=split<CR>
  nnoremap <silent> <Leader>gD <Cmd>Gina diff --opener=split<CR>
  nnoremap <silent> <Leader>gS <Cmd>Gina status -s<CR>

  nnoremap <silent> <Leader>gbl <Cmd>Gina blame<CR>
  nnoremap <Leader>gg :Gina log -p -G""<Left>

  call extend(g:vimrc_altercmd_dic, {
        \   'gin[a]': 'Gina',
        \ })

  let g:sayonara_filetypes['gina-blame'] = 'tabclose'
'''
hook_source = '''
  " alias
  call gina#custom#command#alias('status', 'st')
  call gina#custom#command#option('st', '-s')
  " call gina#custom#command#option('status', '--opener', 'split')

  call gina#custom#command#alias('branch', 'b')

  call gina#custom#command#alias('log', 'gl')
  call gina#custom#command#option('gl', '--graph')

  " key mapping
  call gina#custom#mapping#nmap('status', 'cc', ':<C-u>Gina commit -v --group=status<CR>', {'noremap': 1, 'silent': 1, 'buffer': 1, 'nowait': 1})
  " show から戻るときは <C-o>
  call gina#custom#mapping#nmap('blame', 's', ':<C-u>Gina show<CR>', {'noremap': 1, 'silent': 1, 'buffer': 1, 'nowait': 1})
  call gina#custom#mapping#nmap('blame', 'e', '<Plug>(gina-blame-echo)', {'noremap': 0, 'buffer': 1, 'nowait': 1})
'''

[[plugins]]
repo = 'cohama/agit.vim'
on_cmd = 'Agit'
hook_source = '''
  " Sayonara
  let g:sayonara_filetypes.agit = 'tabclose'
  let g:sayonara_filetypes.agit_stat = 'tabclose'
  let g:sayonara_filetypes.agit_diff = 'tabclose'
'''

# }}}1  Utility {{{1
[[plugins]]
repo = 'tyru/vim-altercmd'
hook_add = '''
  " https://github.com/DeaR/dotfiles/blob/7c021c276903d93e413bf0b4c7b134b1e0c8f946/.vimrc#L1421-L1436
  function! s:altercmd_load() abort
    for [key, value] in items(g:vimrc_altercmd_dic)
      " AlterCommand と CAlterCommand は同じ
      execute 'CAlterCommand' key value
    endfor
  endfunction
  autocmd vimrc VimEnter * call s:altercmd_load()

  function! s:altercmd_load_cmdwin() abort
    for [key, value] in items(g:vimrc_altercmd_dic)
      execute 'IAlterCommand <buffer>' key value
    endfor
  endfunction
  autocmd vimrc CmdwinEnter : call s:altercmd_load_cmdwin()
'''

[[plugins]]
repo = 'tyru/open-browser.vim'
on_map = '<Plug>(openbrowser-'
on_func = 'openbrowser#open'
hook_add = '''
  nmap <Leader>oo <Plug>(openbrowser-open)
  BulkMap [nx] <Leader>o <Plug>(openbrowser-open)

  nnoremap <Leader>og <Cmd>call vimrc#openGithubRepository('n')<CR>
  xnoremap <Leader>og <Cmd>call vimrc#openGithubRepository('v')<CR>
'''
[plugins.ftplugin]
help = '''
  nmap <silent> <buffer> o <Plug>(openbrowser-open)
'''

[[plugins]]
repo = 'tyru/open-browser-unicode.vim'
on_cmd = 'OpenBrowserUnicode'
depends = 'open-browser.vim'
hook_add = '''
  nnoremap <Leader>ou <Cmd>OpenBrowserUnicode<CR>
'''

[[plugins]]
repo = 'thinca/vim-prettyprint'
on_cmd = 'PP'
hook_add = '''
  let g:prettyprint_width = 78
  let g:prettyprint_indent = 2

  call extend(g:vimrc_altercmd_dic, {'pp': 'PP'})
'''

#[[plugins]]
#repo = 'ynkdir/vim-vimlparser'

[[plugins]]
repo = 'kana/vim-operator-user'

[[plugins]]
repo = 'fedorenchik/VimCalc3'
on_cmd = 'Calc'
hook_source = '''
  " Sayonara
  let g:sayonara_filetypes.vimcalc = 'bdelete'
'''

[[plugins]]
repo = 'kana/vim-submode'
hook_add = '''
  let g:submode_keep_leaving_key = 1
  let g:submode_timeout = 0

  " TODO: submode を抜けるときに <silent> を効かせたいけど方法はないのかな？

  " tab move
  call submode#enter_with('changetab', 'n', '', 'gt', 'gt')
  call submode#enter_with('changetab', 'n', '', 'gT', 'gT')
  call submode#map('changetab', 'n', '', 't', 'gt')
  call submode#map('changetab', 'n', '', 'T', 'gT')

  " 変更した位置
  call submode#enter_with('move-change', 'n', '', 'g;', 'g;')
  call submode#enter_with('move-change', 'n', '', 'g,', 'g,')
  call submode#map('move-change', 'n', '', ';', 'g;')
  call submode#map('move-change', 'n', '', ',', 'g,')
  call submode#map('move-change', 'n', '', ':', 'g,')

  " move to next/previous fold
  call submode#enter_with('move-to-fold', 'n', '', 'zj', 'zj')
  call submode#enter_with('move-to-fold', 'n', '', 'zk', 'zk')
  call submode#map('move-to-fold', 'n', '', 'j', 'zj')
  call submode#map('move-to-fold', 'n', '', 'k', 'zk')

  " 時系列 undo/redo
  call submode#enter_with('undo/redo', 'n', '', 'g-', 'g-')
  call submode#enter_with('undo/redo', 'n', '', 'g+', 'g+')
  call submode#map('undo/redo', 'n', '', '-', 'g-')
  call submode#map('undo/redo', 'n', '', '+', 'g+')

  "https://raw.githubusercontent.com/ryotako/dotfiles/52b1ecb275e577dcb44db367a1f563d471c2cab0/.vimrc
  " x 連打削除を一つの undo で戻るように
  " レジスタに登録しない "_x
  call submode#enter_with('x', 'n', '', 'x', '"_x')
  call submode#map('x', 'n', 's', 'x', ":<C-u>undojoin <bar> normal! \"_x<CR>")

  " diff
  call submode#enter_with('diff', 'n', '', 'dn', ']c')
  call submode#enter_with('diff', 'n', '', 'dp', '[c')
  call submode#map('diff', 'n', '', 'n', ']c')
  call submode#map('diff', 'n', '', 'p', '[c')
  call submode#enter_with('diff', 'n', '', 'dj', ']c')
  call submode#enter_with('diff', 'n', '', 'dk', '[c')
  call submode#map('diff', 'n', '', 'j', ']c')
  call submode#map('diff', 'n', '', 'k', '[c')

  " Visual モード時のインクリメント、デクリメント
  " http://vim-jp.org/blog/2015/06/30/visual-ctrl-a-ctrl-x.html
  call submode#enter_with('vinc', 'x', '', '<Leader>a', '<c-a>gv')
  call submode#enter_with('vinc', 'x', '', '<Leader>x', '<c-x>gv')
  call submode#map('vinc', 'x', '', 'a', '<c-a>gv')
  call submode#map('vinc', 'x', '', 'x', '<c-x>gv')
'''

# [[plugins]]
# repo = 'vim-jp/vital.vim'
# depends = 'vital-Whisky'
# on_cmd = 'Vitalize'

# [[plugins]]
# repo = 'lambdalisue/vital-Whisky'
# lazy = 1

[[plugins]]
repo = 'vim-jp/vimdoc-ja'

# Vim に追加された機能のバージョンを確認
[[plugins]]
repo = 'tweekmonster/helpful.vim'
on_cmd = 'HelpfulVersion'
hook_add = '''
  call extend(g:vimrc_altercmd_dic, {'Helpfu[lVersion]': 'L HelpfulVersion'})
'''

# }}}1

