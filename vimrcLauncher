" gvim -N -U NONE -i NONE -u ~/vimfiles/vimrcLauncher -c "CtrlPLauncher copy"
" benchmark
" gvim -N -U NONE -i NONE -u ~/vimfiles/vimrcLauncher -c "CtrlPLauncher copy" --startuptime vimrcLauncher.log
scriptversion 3
set encoding=utf-8
scriptencoding utf-8
" encoding 設定で起動が 0.03s 遅くなる？誤差？

let s:reposPath = expand('~\_vim\dein\repos\github.com\')
let s:reposDirs = [
     \ 'ctrlpvim\ctrlp.vim',
     \ 'mattn\ctrlp-launcher',
     \ 'mattn\ctrlp-matchfuzzy',
     \ 'rhysd\vim-color-spring-night',
     \]
" このファイルのあるディレクトリに .ctrlp-launcher-copy を作成しておく。
let g:ctrlp_launcher_file = '~/vimfiles/.ctrlp-launcher'
" 普段 CtrlP を使っているなら別のディレクトリを指定
let g:ctrlp_cache_dir = '~/_vim/.ctrlpLauncher'
" 表示行
let s:lines = 5
" ウィンドウ位置
let s:winposX = 700
let s:winposY = 200

" 不要なプラグイン、設定を読み込まない
" plugin
let g:loaded_getscriptPlugin   = 1
let g:loaded_gzip              = 1
let g:loaded_logiPat           = 1
let g:loaded_manpager_plugin   = 1
let g:loaded_matchparen        = 1
let g:loaded_netrw             = 1
let g:loaded_netrwPlugin       = 1
let g:loaded_netrwSettings     = 1
let g:loaded_netrwFileHandlers = 1
let g:loaded_rrhelper          = 1
let g:loaded_spellfile_plugin  = 1
let g:loaded_tar               = 1
let g:loaded_tarPlugin         = 1
let g:loaded_2html_plugin      = 1
let g:loaded_tutor_mode_plugin = 1
let g:loaded_vimball           = 1
let g:loaded_vimballPlugin     = 1
let g:loaded_zip               = 1
let g:loaded_zipPlugin         = 1

" defaults.vim
let g:skip_defaults_vim        = 1
" filetypes.vim
let g:did_load_filetypes       = 1
" indent.vim
let g:did_indent_on            = 1
" syncolor.vim
let g:syntax_cmd               = 'disable'

" viminfo は読み書きしない
set viminfo=

" simple window
let g:did_install_default_menus = 1
let g:did_install_syntax_menu = 1
" guioptions-=r 右スクロールバーを消すと起動が 0.03s ほど遅くなる？　誤差？
set guioptions+=M guioptions-=m guioptions-=e guioptions-=T guioptions+=! guioptions-=r
" 末尾に半角スペースあり。~ を消すため。
set fillchars=eob:\ 
" 自分の環境では、この gVim の起動は Autohotkey のホットキーに割り当てているけれど、前面に出ないことがあるので vimLauncher をキーワードに前面に出るように処理している
set title
set titlestring=vimLauncher

" remove statusline
" 末尾に半角スペースあり。バッファ名を消すため
set statusline=\ 
set laststatus=0
autocmd ColorScheme * :highlight! link StatusLineNC Comment

" set plugins
for s:dir in s:reposDirs
  execute($'set runtimepath+={s:reposPath}{s:dir}')
endfor

" CtrlP
let g:ctrlp_max_history = 0
let g:ctrlp_match_window = $'bottom,order:btt,min:{s:lines},max:{s:lines},results:0'
let g:ctrlp_regexp = 0
" デフォルトのキーマップを別の操作に使いたい場合は、デフォルトのキーマップも変更する
let g:ctrlp_prompt_mappings = {
      \ 'PrtBS()'              : ['<bs>', '<c-]>', '<c-h>'],
      \ 'ToggleType(1)'        : ['<c-up>'],
      \ 'ToggleType(-1)'       : ['<c-down>'],
      \ 'PrtCurLeft()'         : ['<c-b>', '<left>', '<c-^>'],
      \ 'PrtCurRight()'        : ['<c-f>', '<c-l>', '<right>'],
      \ 'AcceptSelection("e")' : ['<cr>', '<2-LeftMouse>', '<m-m>'],
      \ 'PrtHistory(-1)'       : [],
      \ 'PrtSelectMove("j")'   : ['<c-j>', '<down>', '<m-j>', '<c-n>'],
      \ 'PrtHistory(1)'        : [],
      \ 'PrtSelectMove("k")'   : ['<c-k>', '<up>', '<m-k>', '<c-p>'],
      \ 'AcceptSelection("v")' : [],
      \ 'PrtInsert("c")'       : ['<c-v>', '<MiddleMouse>', '<insert>'],
      \ 'ToggleByFname()'      : [],
      \ 'PrtDelete()'          : ['<c-d>', '<del>'],
      \ 'PrtDeleteEnt()'       : ['<F7>', '<c-w>'],
      \ 'PrtDeleteWord()'      : ['<c-q>'],
      \ }

" ctrlp-matchfuzzy
let g:ctrlp_match_func = #{match: 'ctrlp_matchfuzzy#matcher'}

" spring-night
let g:spring_night_kill_italic = 1
let g:spring_night_kill_bold = 1

filetype plugin indent on
syntax on

" colorscheme は起動時間にほぼ影響ない
colorscheme spring-night

set guifont=ＭＳ_ゴシック:h18

execute($'set lines={s:lines+3}')
execute($'winpos {s:winposX} {s:winposY}')

function! Copy(s) abort
  call setreg("*", a:s)
  quit
endfunction
command! -nargs=1 Copy call Copy(<q-args>)

function AppendQuote(quote) abort
  call getreg("*", 1, v:true)
        \ ->map({_, v -> $'{a:quote} {v}'})
        \ ->setreg("*")
  quit
endfunction

function Substitute(from, to) abort
  call getreg("*", 1, v:true)
        \ ->map({_, v -> substitute(v, a:from, a:to, "g")})
        \ ->setreg("*")
  quit
endfunction

function SubstituteInput() abort
  const from = input('From: ')
  if empty(from)
    quit
  endif

  const to = input('To: ')
  if empty(to)
    quit
  endif

  call getreg("*", 1, v:true)
        \ ->map({_, v -> substitute(v, from, to, "g")})
        \ ->setreg("*")
  quit
endfunction

function ReadfileCopy(file) abort
  call readfile(a:file)->setreg("*")
  quit
endfunction

function TodayCopy() abort
  call strftime('%Y%m%d')->setreg("*")
  quit
endfunction

" <ESC> でVimを終了
set updatetime=100
autocmd CursorHold <buffer> :quit
